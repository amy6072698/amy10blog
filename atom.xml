<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Amy咂摳修練手冊</title>
  <icon>http://amy6072698.github.io/amy10blog/icon.png</icon>
  <subtitle>歡迎進入網頁的奇幻世界</subtitle>
  <link href="http://amy6072698.github.io/amy10blog/atom.xml" rel="self"/>
  
  <link href="http://amy6072698.github.io/amy10blog/"/>
  <updated>2025-05-19T15:53:57.941Z</updated>
  <id>http://amy6072698.github.io/amy10blog/</id>
  
  <author>
    <name>Amy咂摳</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript 修練 (2) | 陳述式與表達式</title>
    <link href="http://amy6072698.github.io/amy10blog/2025/05/15/20250515-js-learning2/"/>
    <id>http://amy6072698.github.io/amy10blog/2025/05/15/20250515-js-learning2/</id>
    <published>2025-05-15T15:30:47.000Z</published>
    <updated>2025-05-19T15:53:57.941Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JavaScript-的文法概念"><a href="#JavaScript-的文法概念" class="headerlink" title="JavaScript 的文法概念"></a>JavaScript 的文法概念</h2><p>程式語言就像對電腦說的語言，和其他語言一樣也會有自己的文法概念，這些文法形成的語句，會影響電腦對程式碼執行的方式</p><p>本篇文章將介紹陳述式與表達式的差異，而下篇文章也會接續提到關於運算子執行的先後順序，這些都與 JavaScript 的文法相關，而開發中這種文法概念所產生的問題，往往不容易被察覺，所以如果能先了解一些觀念在除錯上也會比較容易發現問題所在，甚至避開可能發生的問題</p><h2 id="陳述式與表達式"><a href="#陳述式與表達式" class="headerlink" title="陳述式與表達式"></a>陳述式與表達式</h2><p>陳述式與表達式在學習過程中常常被忽略，但其實很常在各種技術文件中出現的專有名詞</p><p>陳述式與表達式在中文翻譯都有其他不同的名稱，但看英文原文就會知道說的是同一個東西，所以開始往下介紹之前，先來定義一下接下來文章的中文用詞：</p><ul><li><p><strong>Statement</strong> ：中文翻譯有敘述句、陳述式，接下來文章都統一叫「陳述式」</p></li><li><p><strong>Expression</strong> ：中文翻譯有運算式、表示式、表達式，接下來文章都統一叫「表達式」</p></li></ul><p>定義好用詞後，接下來先比較這兩者各自的特點，再來說明常看到的陳述式和表達式有哪些吧 ~</p><h3 id="陳述式"><a href="#陳述式" class="headerlink" title="陳述式"></a>陳述式</h3><p>陳述式特點如下：</p><ul><li>會執行一些程式碼，但是 <strong>不會回傳結果</strong></li><li>可能是幾個單詞或一個片段，但不會是單一個字母</li><li>其中可能混合表達式</li></ul><h3 id="表達式"><a href="#表達式" class="headerlink" title="表達式"></a>表達式</h3><p>表達式特點如下：</p><ul><li>最大特點是 <strong>會回傳結果</strong></li><li>單一個字也可以是表達式</li></ul><hr><h3 id="哪些是常見的陳述式？"><a href="#哪些是常見的陳述式？" class="headerlink" title="哪些是常見的陳述式？"></a>哪些是常見的陳述式？</h3><ul><li>宣告 ( var、let、const、function )</li><li>流程控制 ( block、if…else )</li><li>迴圈 ( for、for…in )</li><li>其他 ( import、export )</li></ul><h4 id="範例說明"><a href="#範例說明" class="headerlink" title="範例說明"></a>範例說明</h4><p>再來看看幾個範例，實際觀察陳述式在 Chrome 的開發者工具 Console 中會顯示的內容</p><p><code>var a;</code> 這個程式片段宣告了一個變數 a，是一個簡單的陳述式，而在 Console 中<code>&lt;・</code> 符號後面內容代表 Console 回傳的結果，這邊看到這段程式碼結果會是 undefined，代表這段程式碼沒有取得值、不會回傳值</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/201726945X4wBALuaY.png" alt=" var a 陳述式在 Console 中的結果"></p><p>前面提到陳述式可能混合表達式，接下來就來看看混合的範例</p><p>綠框延續上一個單純是陳述式的範例 <code>var a;</code>，黃框處透過運算子 <code>+</code> 計算 <code>2 + 2;</code>，會回傳計算結果 <code>4</code> 所以是表達式，橘框處則是混合綠框與黃框的陳述式，所以 Console 的回傳結果是 undefined</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694ZKuwl6LBq4.png" alt="陳述式混合表達式的結果"></p><h4 id="undefined-產生的誤會"><a href="#undefined-產生的誤會" class="headerlink" title="undefined 產生的誤會"></a>undefined 產生的誤會</h4><p>前面有提到「表達式最大特點是會回傳結果」，這樣陳述式在 Console 回傳的結果是 undefined 就容易因此產生誤會，因為會出現兩種情況：</p><ul><li><strong>不會回傳值</strong> ：因為不會回傳值，所以 Console 回傳的結果是 undefined</li><li><strong>會回傳值但沒有提供回傳值</strong> ：此時就算會回傳值，Console 回傳的結果也是 undefined</li></ul><p>只看以上說明可能有些抽象，讓我們看看以下範例吧<br><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694DMNSLJ9Yn8.png" alt="說明回傳結果 undefined 的兩種狀況"></p><p>圖中綠框處 fn1 和 fn2 都是用函是陳述式宣告的函式，所以陳述式在 Console 回傳的結果是 undefined，而呼叫函式會回傳值所以是表達式，而 fn1 函式在綠框片段中有提供回傳值，所以在黃框處呼叫 fn1 函式後，Console 回傳的結果是 <code>&#39;我是 fn1 函式&#39;</code></p><p>容易產生誤會的片段在橘框，明明呼叫函式是表達式，怎麼 Console 回傳的結果是 undefined？</p><p>往前看綠框片段中的 fn2 並沒有提供回傳值，所以在橘框處呼叫函式時有回傳值，但是因為沒有提供回傳值，所以 Console 才會回傳 undefined</p><hr><h3 id="哪些是常見的表達式？"><a href="#哪些是常見的表達式？" class="headerlink" title="哪些是常見的表達式？"></a>哪些是常見的表達式？</h3><ul><li>純值 ( 一個數字 1 也可以稱為「表達式」)</li><li>變數</li><li>運算子</li><li>執行函式</li><li>正規表達式</li><li>函式表達式</li><li>if 小括號內的條件 (condition) 是表達式</li></ul><h4 id="範例說明-1"><a href="#範例說明-1" class="headerlink" title="範例說明"></a>範例說明</h4><p>接下來看幾個程式碼範例，然後利用 Chrome 的開發者工具 Console 查看結果</p><p>在 Console 輸入 1，會回傳 1，<code>&lt;・</code> 符號後面的 1 代表 Console 回傳的結果</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694vMcUipV9Ih.png" alt="純值在 Console 會回傳結果"></p><p>再來看看運算子 <code>===</code> 在 Console 中的結果，<code>1 === 1</code> 會回傳 <code>true</code> 的結果</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694A76HRFz2av.png" alt="運算子計算結果也是表達式"></p><p>以上兩個範例都會回傳結果，因此純值和運算子計算的結果都屬於表達式</p><p>接下來看看陳述式與表達式混合的範例，以下程式碼中，紅框區塊函式陳述式是陳述式，下面藍框區塊呼叫函式之後回傳了 <code>&#39;我是函式&#39;</code> 的結果，所以呼叫、執行函式為表達式</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694pc54DnLUnI.png" alt="陳述式與表達式混合"></p><ul><li><strong>簡單比喻一下陳述式與表達式</strong>：陳述式就像只是在講一件要對方做的事，對方只要去做就好不用回應，表達式則像是在問對方問題，希望對方能夠給你回應</li></ul><h3 id="表達式運用情境"><a href="#表達式運用情境" class="headerlink" title="表達式運用情境"></a>表達式運用情境</h3><p>了解陳述式與表達是如何判斷對於閱讀技術文件會有很大的幫助，以前面提到的 if 小括號內的條件 (condition) 是表達式為例</p><p>假設需要知道 if…else 如何使用，在 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else">MDN 文件</a>會看見關於 if…else 說明引用如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition)</span><br><span class="line">  statement1</span><br><span class="line"></span><br><span class="line"><span class="comment">// With an else clause</span></span><br><span class="line"><span class="keyword">if</span> (condition)</span><br><span class="line">  statement1</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  statement2</span><br></pre></td></tr></table></figure><blockquote><p>condition：An expression that is considered to be either truthy or falsy</p></blockquote><p>這邊可以說明有提到小括號內的 condition 是一個表達式，而它的結果會是真值或假值，那就可以放心的把任何表達式加入 condition 內，像這樣：</p><p>紅框內呼叫 fn 函式，回傳值為 true，所以會執行 if 大括號 <code>&#123;&#125;</code> 中的程式碼印出 <code>&#39;恭喜通關！&#39;</code></p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694Oka1pbliOB.png" alt=" condition 是表達式"></p><p>這時候就會想實驗看看，把陳述式放入 condition，會發生什麼事 ~~(跟你說要放表達式竟然不聽話)</p><p>結果就是會跳出 SyntaxError 的錯誤訊息，把陳述式放入 condition 會造成運作上的錯誤，還是乖乖聽話吧 ~</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694eOlxHlhL7P.png" alt="把陳述式放入 condition 的錯誤訊息"></p><p>除了 if 的 condition 之外，還有一些框架使用上會需要了解表達式的概念，像是 React 的 JSX 就有提到大括號 <code>&#123;&#125;</code> 中可以放入 JavaScript 的表達式來運作</p><hr><h2 id="函式陳述式與函式表達式"><a href="#函式陳述式與函式表達式" class="headerlink" title="函式陳述式與函式表達式"></a>函式陳述式與函式表達式</h2><p>前篇有提到這兩者一樣是宣告函式，但是不同語句的差異，遇到提升時卻有不同的運作方式，這篇剛好介紹到了陳述式與表達式 <del>真巧呀</del>，那就再分別對這兩種宣告函式的語句做一些介紹吧 ~</p><h3 id="函式陳述式"><a href="#函式陳述式" class="headerlink" title="函式陳述式"></a>函式陳述式</h3><p>首先 function 和 var 一樣是關鍵字，可以用來宣告一個函式，而以下範例的宣告方式就屬於陳述式語句</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>陳述式不會回傳值，所以 Console 只會回傳 undefined 的結果</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694WGJJ56uGXs.png" alt="函式陳述式不會回傳值"></p><p>而相同寫法只要在前後加上小括號，就會從陳述式轉變為表達式</p><p>這邊可以看到前後加上小括號後，Console 會回傳這個函式本身的結構，此時的函式可稱為「函式表達式」</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694RX8ZErFckf.png" alt="陳述式轉變為表達式的回傳結果"></p><h3 id="函式表達式"><a href="#函式表達式" class="headerlink" title="函式表達式"></a>函式表達式</h3><p>前面提到把函式本身作為表達式使用，回傳的值會是函式的本身，那麼如果我們將這個值 ( 函式本身 ) 賦予到一個變數上，那它就會成為大家所說的「函式表達式」</p><p>將函式表達式回傳的函式賦予給等號 <code>=</code> 左邊的變數</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fn = <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>延伸討論剛剛提到的 if 小括號內的 condition 必須是表達式，那如果把函式陳述式語句直接放入小括號中 ( 如下 )，程式碼是否還可以運作呢？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">function</span> <span class="title function_">a</span>(<span class="params">p</span>) &#123;&#125;)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ㄟ嘿！我可以動！&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這邊雖然小括號中的語句看起來是函式陳述式，但是實際上是作為表達式使用，就像前面陳述式前後加小括號轉為表達式一樣，所以程式碼式能正常運作的，而表達式回傳的函式本身會報判斷為真值，所以 <code>console.log</code> 也可以執行喔 ~ <del>看它可以動多開心</del></p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694pJFvUcID8X.png" alt="函式陳述式放入 if 小括號內可以正常運作"></p><h3 id="具名函式與匿名函式"><a href="#具名函式與匿名函式" class="headerlink" title="具名函式與匿名函式"></a>具名函式與匿名函式</h3><p>既然都講到以上兩種函式的宣告語句差異了，那就來接著往下講講函式命名問題吧 ~ </p><p>顧名思義，具名函式是有名字的函式，而匿名函式則沒有名字，函式有沒有名字在函式陳述式和函式表達式兩種語句上也有差異</p><ul><li><strong>函式陳述式</strong> ：宣告的函式一定要有名字</li><li><strong>函式表達式</strong> ：宣告的函式有沒有名字都可以</li></ul><p>接下來看範例比較一下兩者</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函式陳述式</span></span><br><span class="line"><span class="comment">// function 後方有名字 fn1，這稱為具名函式</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函式表達式</span></span><br><span class="line"><span class="comment">// function 後方沒有名字，因此稱為匿名函式</span></span><br><span class="line"><span class="keyword">var</span> fn2 = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函式表達式其實也可以在 function 後面加上函式的具名名稱</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// function 後方的 callMe 是函式的名稱</span></span><br><span class="line"><span class="keyword">var</span> fn2 = <span class="keyword">function</span> <span class="title function_">callMe</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是以上範例的 callMe 這個名稱無法在外部被取得，只能透過變數 fn2 回傳值的方式，或是在 fn2 函式內才能取得</p><p>圖中可以看見紅框處執行 fn2 函式後式可以取得 callMe 這個名稱的，黃框處直接輸入變數名稱 fn2，也可以取得 callMe 這個名稱，但是綠框處試圖在外部取得 callMe，卻跳出 ReferenceError 錯誤，無法取得 callMe 這個名稱<br><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694EJbzF2WXbJ.png" alt="callMe 名稱無法被外部取得"></p><p>雖然具名的函式表達式名稱，可以在函式內被呼叫，但實戰上不太會有呼叫此函式的需求，所以不太會這樣做</p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>以上是一些關於陳述式與表達式的差異介紹，如果想在更深入了解陳述式及表達式的分類也可以參考以下相關的 MDN 文件：</p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements">陳述式與宣告 - Statements and declarations</a></li><li><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Operators">運算式與運算子 - Expressions and operators</a></li></ul><p>下篇會再接續本篇，往後介紹運算子執行先後順序的相關內容，那我們就下篇文章件囉 ~</p>]]></content>
    
    
    <summary type="html">介紹陳述式與表達式的差異</summary>
    
    
    
    <category term="JavaScript" scheme="http://amy6072698.github.io/amy10blog/categories/JavaScript/"/>
    
    
    <category term="前端" scheme="http://amy6072698.github.io/amy10blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="http://amy6072698.github.io/amy10blog/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 修練 (1) | 變數的宣告、作用域與提升</title>
    <link href="http://amy6072698.github.io/amy10blog/2025/05/14/20250514-js-learning1/"/>
    <id>http://amy6072698.github.io/amy10blog/2025/05/14/20250514-js-learning1/</id>
    <published>2025-05-14T06:12:43.000Z</published>
    <updated>2025-05-19T15:37:31.912Z</updated>
    
    <content type="html"><![CDATA[<h2 id="沒有宣告變數會怎樣？"><a href="#沒有宣告變數會怎樣？" class="headerlink" title="沒有宣告變數會怎樣？"></a>沒有宣告變數會怎樣？</h2><p>宣告變數的目的在於賦予變數一個初始值，並限制它的作用域。</p><p>在學習 JavaScript 的過程中，總是會一直被重複提醒變數需要被宣告，但是一開始學習 JavaScript 並不會了解為什麼要這樣做，這背後的原因到底是什麼</p><p>這篇文章將介紹有關變數宣告、作用域及提升相關的內容，接下來就用幾個範例，透過比較來了解到底為什麼吧 ~</p><h3 id="沒有宣告的變數會變成全域「屬性」"><a href="#沒有宣告的變數會變成全域「屬性」" class="headerlink" title="沒有宣告的變數會變成全域「屬性」"></a>沒有宣告的變數會變成全域「屬性」</h3><p>相信在學習過程中常常會聽到有人說：「沒有宣告的變數會變成全域『變數』」，這句話其實嚴格來說不太正確，正確來說是：「沒有宣告的變數會變成全域『屬性』」</p><p>先來比較有宣告的變數 a 及沒有宣告的變數 b，到底有什麼差異</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var a = 1;</span><br><span class="line">b = 2;</span><br><span class="line"></span><br><span class="line">console.log(window);  // 執行結果如下圖</span><br></pre></td></tr></table></figure><p>展開執行結果會發現全域物件也就是 window 裡面，出現了 a 跟 b 兩個屬性<br><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694LrvywMQ2VW.png" alt="window 物件內容"></p><p>這時候你就會感覺到混亂，所以 a 跟 b 誰是屬性？誰是變數？</p><p>先別急，接著往下走，如果你有一些物件的基礎知識，應該會知道物件內有屬性這個東西，而 window 是一個全域的物件，所以 window 內也會有它的屬性，而沒有宣告的所謂「變數 b」，其實在 JavaScript 眼中是這樣的，前面省略了 window</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">window.b = 2;</span><br></pre></td></tr></table></figure><p>所以你以為你在幫變數賦予值，但其實是在幫 window 這個全域物件新增一個屬性 b 並賦予它值為 2，所以 b 其實是全域的屬性不是變數</p><p>可是用 var 宣告的變數 a 呢？它也在 window 裡面，怎麼證明他們不一樣？</p><p>接下來就派出 delete 這個運算子了，delete 運算子可以用來刪除物件中的屬性，而變數是無法被刪除的，那把它拿來刪除 a 跟 b 會發生什麼事呢？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var a = 1;</span><br><span class="line">b = 2;</span><br><span class="line"></span><br><span class="line">delete a;</span><br><span class="line">delete b;</span><br><span class="line"></span><br><span class="line">console.log(window);  // 執行結果如下圖</span><br></pre></td></tr></table></figure><p>執行完你會發現 window 裡面的 b 被成功刪除了，但是 a 卻沒有</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/201726948KvERtGHad.png" alt=" window 裡面的 b 被成功刪除了，但是 a 卻沒有"></p><p>所以 b 其實是全域 window 屬性，可以使用 delete 刪除它；而 a 在全域環境使用 var 宣告，則為全域變數，無法使用 delete 刪除它</p><p>未宣告的變數其實是全域 window 下的一個屬性不是真的變數，而全域的 window 沒有作用域限制，在哪都可以被存取</p><p>在全域環境下用 var 宣告的變數，雖然是變數但也會在 window 下建立屬性，它並不會被 delete 刪除，所以無論用 window.a 或是用 a 都能取得變數的值</p><h4 id="小補充：let、const-宣告的全域變數"><a href="#小補充：let、const-宣告的全域變數" class="headerlink" title="小補充：let、const 宣告的全域變數"></a>小補充：let、const 宣告的全域變數</h4><p>這邊補充在全域環境使用 let 或 const 宣告的全域變數，不會在 window 下建立屬性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var a = 1;</span><br><span class="line">let abc = 3;</span><br><span class="line">const abcd = 4;</span><br><span class="line"></span><br><span class="line">console.log(window);  // 執行結果如下圖</span><br></pre></td></tr></table></figure><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694MDVbnsDwav.png" alt="console.log(window) 執行結果"></p><hr><h3 id="我就不宣告怎麼樣"><a href="#我就不宣告怎麼樣" class="headerlink" title="我就不宣告怎麼樣"></a>我就不宣告怎麼樣</h3><p>看了以上這個多解釋，可能還是不太理解到底不宣告變數的後果是什麼，那就讓我們叛逆一次示範一下 <del>(不聽話的下場)</del> 會發生什麼事</p><p>前面有提到未宣告會變成全域屬性，而全域的 window 沒有作用域限制，所以在每個函式和作用域內都可以取得 window 及 window 下的所有屬性</p><p>如果你跟我一樣 <del>剛好是金魚腦</del>，在寫了幾百行程式碼之後可能會發生以下慘劇</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">function fn() &#123;</span><br><span class="line">  family = [];</span><br><span class="line">  newMember();</span><br><span class="line">  console.log(family);  // [&#123;name: &quot;小美&quot;&#125;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function newMember() &#123;</span><br><span class="line">  family.push(&#123;</span><br><span class="line">    name: &quot;小美&quot;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn();</span><br><span class="line"></span><br><span class="line">// 中間寫了幾百行程式碼，然後...</span><br><span class="line"></span><br><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">  family = &#123;&#125;;  // 這行程式碼把小美家直接清空</span><br><span class="line">  console.log(family);  // &#123;&#125;</span><br><span class="line">&#125;, 1000);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>以上程式碼中 family 在沒有宣告的情況下，它變成了全域屬性，開發時在任何函式中都可以輕鬆呼叫 family，而開發過程中寫了幾百行程式碼後，有可能會忘記定義了哪些全域屬性，所以又用了同樣的名稱來進行開發，結果就是小美家直接變成空物件，程式碼無法運作但你找不到原因</p><p>一個人開發都有可能會因為忘記而出錯，更不要說跟團隊一起開發，未宣告的變數會變成全域屬性，造成全域環境的作用域汙染，導致其他命名覆蓋問題，這可能會導致除錯上的困難</p><hr><h2 id="變數的作用域"><a href="#變數的作用域" class="headerlink" title="變數的作用域"></a>變數的作用域</h2><p>前面提到未宣告變數的後果時，有說到作用域這些詞，接下來就來說說變數的「作用域」( Scope ) 吧 ~</p><p>JavaScript 有一個特別的機制稱為「語法作用域」( Lexical scope )，又稱為「靜態作用域」，意思是原始碼經過直譯器執行後就已經確定了作用域且不會再改變，這讓開發者可以直接透過原始碼了解當前的變數作用域</p><p>簡單來說所謂的語法作用域就是你宣告時就已經決定好他的作用域，而變數宣告後會被限制其作用域，作用域會因為宣告語法不同 ( var、let、const ) 而有變化</p><h3 id="全域變數與區域變數"><a href="#全域變數與區域變數" class="headerlink" title="全域變數與區域變數"></a>全域變數與區域變數</h3><p>如果舉例來形容全域變數與區域變數，全域變數就像全國的補助、而區域變數則像縣市補助</p><ul><li><strong>全域變數</strong> ：全國補助，全國各地都能申請</li><li><strong>區域變數</strong> ：縣市補助，只有在特定縣市內才能申請</li></ul><p>兩者作用域範圍不同，全域代表的是最外層，內層可能是各個函式或作用域，而 <strong>在內層可以存取在外層宣告的變數，在外層則無法存取在內層宣告的變數</strong></p><p>另外，假設在內層沒有宣告過 b 變數，則會透過「向外查找」的機制，一層一層向外尋找是否有叫 b 的變數，直到最外層全域，如果連全域都沒有 b 變數才會跳出「b is not defined」的錯誤訊息</p><p>接下來看幾個範例</p><p>在外層無法存取在 fn 函式內宣告的區域變數 b</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 全域變數</span><br><span class="line">var a = &#x27;小春&#x27;;</span><br><span class="line"></span><br><span class="line">function fn() &#123;</span><br><span class="line">  // 區域變數</span><br><span class="line">  var b = &#x27;小夏&#x27;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(b);  // Uncaught ReferenceError: b is not defined</span><br></pre></td></tr></table></figure><p>在內層 fn2 函式內可以存取在 fn 函式內宣告的區域變數 b</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 全域變數</span><br><span class="line">var a = &#x27;小春&#x27;;</span><br><span class="line"></span><br><span class="line">function fn() &#123;</span><br><span class="line">  // 區域變數</span><br><span class="line">  var b = &#x27;小夏&#x27;;</span><br><span class="line">  console.log(a, b);  // &quot;小春&quot; &quot;小夏&quot;</span><br><span class="line"></span><br><span class="line">  function fn2() &#123;</span><br><span class="line">    // 區域環境，可存取外層作用域的變數</span><br><span class="line">    console.log(a, b);  // &quot;小春&quot; &quot;小夏&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  fn2();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn();</span><br></pre></td></tr></table></figure><hr><h3 id="var-屬於函式作用域"><a href="#var-屬於函式作用域" class="headerlink" title="var 屬於函式作用域"></a>var 屬於函式作用域</h3><p>前面一直用 var 在宣告變數，接下來就來說說 var 宣告的變數作用域範圍</p><p> <strong>var 的作用域範圍在該函式內</strong> ，在該函式內宣告的變數會被限制在該函式作用域中，也就是該變數只能在該函式中取得，有點像是把變數關在叫做函式的小房間中，變數的活動範圍就被限制了</p><p>以下範例在 fn 函式內被宣告的變數 b，無法在 fn2 函式內被存取</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var a = &#x27;小明&#x27;;</span><br><span class="line"></span><br><span class="line">function fn() &#123;</span><br><span class="line">  var b = &#x27;杰倫&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">function fn2() &#123;</span><br><span class="line">  var c = &#x27;漂亮阿姨&#x27;;</span><br><span class="line">  console.log(b); // Uncaught ReferenceError: b is not defined </span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br><span class="line">fn2();</span><br></pre></td></tr></table></figure><h3 id="let、const-屬於區塊作用域"><a href="#let、const-屬於區塊作用域" class="headerlink" title="let、const 屬於區塊作用域"></a>let、const 屬於區塊作用域</h3><p>隨著 ES6 成為主流，現在都會建議使用 let、const 來宣告變數，其中 let 宣告的變數可以重新賦值、const 則無法重新賦值</p><p>前面有提到 var 屬於「函式作用域」( function scope )，而 let、const 的作用域則屬於「區塊作用域」( block scope )</p><p>區塊其實就是大括號 <code>&#123;&#125;</code>，前面有比喻函式作用域像是把變數關進叫做函式的小房間，那麼這裡的區塊作用域就像是把變數關進大括號裡面，限制它的活動範圍 <del>( 變數：結果還是把我關起來了QAQ</del></p><p>除了前面函式的 <code>&#123;&#125;</code> 大括號可以被認定為是一個區塊之外，還有其他在實戰中常見的區塊作用域：</p><ul><li><strong>函式</strong> ：<code>function fn() &#123;...&#125;</code></li><li><strong>for 迴圈</strong> ：<code>for(let i=0; i&lt;10; i++) &#123;...&#125;</code></li><li><strong>判斷式</strong> ：<code>if() &#123;...&#125;</code></li><li><strong>純粹的區塊</strong> ：<code>&#123;&#125;</code></li></ul><p>其中用常見的 for 迴圈來比較 var 和 let 宣告變數的作用域差異</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for(var i = 0; i &lt; 10; i++)&#123;&#125;</span><br><span class="line">console.log(i);  // 10</span><br><span class="line"></span><br><span class="line">for(let j = 0; j &lt; 10; j++)&#123;&#125;</span><br><span class="line">console.log(j);  // Uncaught ReferenceError: j is not defined</span><br></pre></td></tr></table></figure><p>這邊可以看見 var 因為屬於函式作用域，顯然 <code>&#123;&#125;</code> 困不住裡面的變數，所以當在 for 迴圈的小括號中用 var 宣告變數時，這個變數會成為全域變數，或是其他函式內的區域變數 ( 如果迴圈在其他函式內的話 )</p><p>在上面的範例，變數 i 會變成全域變數，在其他地方也能被存取修改，容易汙染作用域環境，而用屬於區塊作用域的 let 宣告，變數的作用域不需要用函式，只要有 <code>&#123;&#125;</code> 就能被限制住，避免產生全域變數，所以使用 let、const 宣告的變數，相對於 var 來說更能避免產生不必要的問題</p><hr><h2 id="提升"><a href="#提升" class="headerlink" title="提升"></a>提升</h2><p>「提升」( Hoisting ) 一詞並未在 ECMAScript 2015 之前的規範中被提到，它通常用於解釋 JavaScript 變數在記憶體中的一種運作形式</p><h3 id="為什麼要把宣告放在前面？"><a href="#為什麼要把宣告放在前面？" class="headerlink" title="為什麼要把宣告放在前面？"></a>為什麼要把宣告放在前面？</h3><p>學習過程中常常會聽到要先宣告變數賦予值，才能使用該變數，確實先宣告後取用很符合邏輯，但如果不這樣做會發生什麼事呢？先看看幾個範例</p><p>我們知道先宣告變數 a 賦予值為 1，再用 <code>console.log(a)</code> 就能印出 1，但反過來先使用再宣告變數，印出的值為什麼是 undefined</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(a);  // undefined</span><br><span class="line">var a = 1;</span><br></pre></td></tr></table></figure><p>這要說到 JavaScript 提升的觀念了，程式碼在瀏覽器執行時分為兩個階段：</p><ul><li><strong>創造階段 ( creation )</strong> ：這個階段會準備記憶體空間</li><li><strong>執行階段 ( execution )</strong> ：這個階段才會實際執行程式碼</li></ul><p>JavaScript 程式碼在執行過程中，會先進入創造階段準備好記憶體空間存放變數的值，再進入執行階段實際將值賦予到變數上</p><p>而以上程式碼因為在宣告變數前就使用變數，這時候 JavaScript 會開始尋找變數 a，找到確實有宣告變數 a，在創造階段就把變數 a 提升到前方，但因為變數還沒賦值，所以執行階段先執行的 <code>console.log(a)</code> 印出來的是 undefined，最後才執行變數 a 的賦值</p><p>所以以上程式碼其實是這樣的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 創造階段</span><br><span class="line">var a;</span><br><span class="line"></span><br><span class="line">// 執行階段</span><br><span class="line">console.log(a);  // undefined</span><br><span class="line">a = 1;</span><br></pre></td></tr></table></figure><p>而 JavaScript 這樣的特性就稱為「提升」，但以上這個範例說明的僅僅是 var 宣告變數時的狀態，如果遇到函式就不一樣了</p><p>相比於 var 宣告的變數，函式在提升上就多了不同的規則：</p><ul><li><strong>函式陳述式會提升完整的函式</strong> ：函式陳述式在創造階段的提升會包含整個完整的函式</li><li><strong>函式陳述式優先</strong> ：函式陳述式會優先於變數的提升</li></ul><p>等等，怎麼會突然冒出一個「函式陳述式」？</p><p>補充一下，宣告函式時通常有兩種方式：「函式陳述式」與「函式表達式」，這兩種方式寫法不同之外，在提升方式上也不同，先來看看以下範例了解兩者不同的地方</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 函式表達式</span><br><span class="line">var callAnimal = function () &#123;</span><br><span class="line">  console.log(&#x27;山羊&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 函式陳述式</span><br><span class="line">function callAnimal() &#123;</span><br><span class="line">  console.log(&#x27;獅子&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">callAnimal();  // &#x27;山羊&#x27;</span><br></pre></td></tr></table></figure><p>什麼？為什麼執行程式碼的結果是「山羊」？不是「獅子」？這邊一樣用創造、執行階段來拆解程式碼，但要加入函式陳述式的規則：提升完整的函式、優先提升</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 創造階段</span><br><span class="line">// 函式陳述式優先提升到前方</span><br><span class="line">function callAnimal() &#123;</span><br><span class="line">  console.log(&#x27;獅子&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var callAnimal;  // var 宣告的變數在函式陳述式後提升</span><br><span class="line"></span><br><span class="line">// 執行階段</span><br><span class="line">// 執行函式表達式的賦值 ( 將函式賦予到變數上 )</span><br><span class="line">callAnimal = function () &#123;</span><br><span class="line">  console.log(&#x27;山羊&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">callAnimal();  // &#x27;山羊&#x27;</span><br></pre></td></tr></table></figure><p>透過以上程式碼可以看出兩者在提升上的不同，函式表達式會先宣告變數，再將函式賦予到變數上，而函式陳述式的提升又優先於變數，所以執行的反而是最後才賦值的函式表達式</p><p>因為這樣的不同所以在實戰中大多會擇一使用，但如果希望將函式宣告統一至於後方，那就只能使用函式陳述式方式宣告函式，這樣提升時才是完整的函式</p><hr><h3 id="let、const-的-TDZ"><a href="#let、const-的-TDZ" class="headerlink" title="let、const 的 TDZ"></a>let、const 的 TDZ</h3><p>前面提到的 var 是 ECMAScript 早期的變數宣告方式，ES6 之後會避免使用 var 宣告，改用 let、const 新的宣告方式，當遇到不明問題時，新語法也能提供適當回饋提示開發者</p><p>前面提到用 var 先取值後宣告，會取得 undefined 的值、不會跳出錯誤訊息，但是用 let、const 如果先取值後宣告，就會出現類似以下的錯誤訊息，提示開發者無法在宣告前取得變數的值</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694LiARekIKOH.png" alt=" let、const 先取值後宣告錯誤訊息"></p><p>這就是 let、const 宣告才有的「暫時性死區」( Temporal Dead Zone, TDZ ) 特性，在 let、const 宣告變數前方的區域就是 TDZ，如果試圖在這個區域寫入程式碼取得變數值，就會出現 ReferenceError 的提示</p><hr><h3 id="小補充：undefined-與-is-not-defined-的差異"><a href="#小補充：undefined-與-is-not-defined-的差異" class="headerlink" title="小補充：undefined 與 is not defined 的差異"></a>小補充：undefined 與 is not defined 的差異</h3><p>undefined 與 is not defined 這兩者字面看起來似乎沒有差異，但經過上面的範例示範應該多少可以感覺到兩者的不同</p><p>相信看到這兩者應該還可以再聯想到：null，那這三者又有什麼差異呢？</p><p>這邊簡單的說明三者間的差異：</p><ul><li><strong>undefined</strong>：是原始型別的一種，在宣告變數時系統預設的空值，開發者應避免手動為變數賦予 undefined 的值</li><li><strong>null</strong>：是原始型別的一種，開發者手動賦予的空值，需要抹除變數已被賦予的值時可以使用 null</li><li><strong>is not defined</strong>：是沒有宣告變數卻試圖取得該變數的值時，會跳出的錯誤訊息，這會讓後面的程式碼無法繼續執行，所以要及時修正才不會影響程式碼運作</li></ul><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>本篇文章介紹了有關 JavaScript 變數宣告、作用域及提升相關的內容，希望能記錄下我學習到的相關內容，同時也希望這篇分享能幫助正在學習 JavaScript 的朋友</p><p>那我們就下篇文章見囉 ~</p>]]></content>
    
    
    <summary type="html">這篇文章將介紹有關變數宣告、作用域及提升相關的內容</summary>
    
    
    
    <category term="JavaScript" scheme="http://amy6072698.github.io/amy10blog/categories/JavaScript/"/>
    
    
    <category term="前端" scheme="http://amy6072698.github.io/amy10blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="http://amy6072698.github.io/amy10blog/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>從零開始學 Hexo (10) | NexT 主題篇 - 客製化主題樣式</title>
    <link href="http://amy6072698.github.io/amy10blog/2025/04/30/20250430-hexo-learning10/"/>
    <id>http://amy6072698.github.io/amy10blog/2025/04/30/20250430-hexo-learning10/</id>
    <published>2025-04-30T14:16:27.000Z</published>
    <updated>2025-05-19T15:55:40.657Z</updated>
    
    <content type="html"><![CDATA[<h2 id="NexT-主題官方文件"><a href="#NexT-主題官方文件" class="headerlink" title="NexT 主題官方文件"></a>NexT 主題官方文件</h2><p>在客製化過程中，我蠻常參考 <a href="https://theme-next.js.org/">NexT 主題官網</a>的，然後會有一些想調整的地方，其實 NexT 主題的 config 檔都有地方可以設定</p><p>所以在往更深的程式碼調整客製介紹之前，我想先針對 NexT 主題的 config 檔中，可以調整的內容做一些簡單介紹</p><h2 id="NexT-主題的-config-檔"><a href="#NexT-主題的-config-檔" class="headerlink" title="NexT 主題的 config 檔"></a>NexT 主題的 config 檔</h2><p>接下來會介紹一些在 NexT 主題的 config 檔中，可以用來調整網站樣式的設定，為了避免重複說到檔案名字，先說明一下，以下提到的設定都是在 NexT 主題的 config 檔中修改的內容</p><h3 id="開啟選單項目"><a href="#開啟選單項目" class="headerlink" title="開啟選單項目"></a>開啟選單項目</h3><p>NexT 主題的選單是需要自己設定開啟的，這邊的選單就很像是網站上方的導覽列，要調整選單要顯示什麼內容，就需要調整以下的 Menue Settings 區塊了<br><img src="https://ithelp.ithome.com.tw/upload/images/20250519/2017269468IVyPHD69.png" alt="Menue Settings 區塊"></p><h4 id="menue"><a href="#menue" class="headerlink" title="menue"></a>menue</h4><p>首先，上方的 menue 可以控制選單要開啟哪些項目，以及調整項目對應的路由跟 icon</p><p>要開啟哪個項目，就刪除該項目開頭的井字號 <code>#</code> 解除註解，反之就加上井字號 <code>#</code> 註解掉，假設我想開啟前五個項目，就把前五項解除註解就可以了</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-user</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || fa fa-calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || fa fa-sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || fa fa-heartbeat</span></span><br></pre></td></tr></table></figure><p>設定好儲存，再開啟伺服器，就可以看到網站多出了剛剛開啟的選單項目囉 ~</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694Kuwzsu9cHz.png" alt="選單項目出現"></p><p>再來假設我想把選單首頁的 icon 改成愛心，要如何調整設定呢？</p><p>這邊的 icon 是使用 <a href="https://fontawesome.com/search">Font Awesome</a> 這個網站的 icon，所以我們就進到這個網站搜尋 heart，找到我想要的愛心 icon 點擊它</p><p>然後就會跳出這個 icon 的套用資訊，把圖中紅框處的代碼複製下來<br><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694TGYFy4I9NZ.png" alt="愛心 icon 套用資訊"></p><p>貼到首頁那項 <code>||</code> 後方，取代原本的 icon 代碼</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa-solid</span> <span class="string">fa-heart</span></span><br></pre></td></tr></table></figure><p>小補充：<code>fa-solid fa-heart</code> 前面的 <code>fa-solid</code> 可以簡寫成 <code>fa</code>，所以也可以改成以下這樣</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-heart</span></span><br></pre></td></tr></table></figure><p>重整網站就可以看到首頁的 icon 改成愛心囉 ~<br><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694kMm3KEffk7.png" alt="首頁項目 icon 改為愛心"></p><ul><li><p><strong>注意</strong> ：記得執行 Hexo 指令新增頁面，才能連結到該頁面喔 ~ 如：要連結到標籤頁面，要先執行 <code>hexo new page tags</code> 新增頁面，點擊選單的標籤才能看到標籤頁面 ( archives 不用新增頁面，預設已經有連結的頁面了 )</p></li><li><p><strong>補充</strong> ：在 NexT 主題的標籤跟分類頁面開頭，分別加入 <code>type: tags</code> 和 <code>type: categories</code> 可以開啟該頁面預設的內容 ( 如下圖 )<br><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694fYqpJ5aZsP.png" alt="標籤頁面開頭 type 設定"><br><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694GHW3ZsiNdY.png" alt="分類頁面開頭 type 設定"></p></li></ul><h4 id="menu-settings"><a href="#menu-settings" class="headerlink" title="menu_settings"></a>menu_settings</h4><p>再來介紹 menu_settings 下的設定，icons 可以調整選單項目 icon 的開關，badges 可以調整選單項目數量標記的開關</p><p>接下來調整 icons 改成 false，badges 改成 true，實際看看選單項目會有什麼變化</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu_settings:</span></span><br><span class="line">  <span class="attr">icons:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">badges:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>設定好再重整網站，會發現選單項目的 icon 都不見了，但是標籤、分類、歸檔這三項多出了數量標記，代表這三項總共有多少數量<br><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694UlCdyrnQec.png" alt="設定後的選單項目"></p><p>這邊歸檔的數量是指網站的文章總共有幾篇，標籤跟分類對應的是文章 md 檔開頭的 tags 跟 categories ( 忘記請參考下方補充 )，所以標籤跟分類後面的數量，分別代表的是網站中所有文章不重複的 tags 有幾個、categories 有幾個</p><h4 id="補充：文章開頭設定-categories-跟-description"><a href="#補充：文章開頭設定-categories-跟-description" class="headerlink" title="補充：文章開頭設定 categories 跟 description"></a>補充：文章開頭設定 categories 跟 description</h4><ul><li><strong>categories</strong></li></ul><p>文章 md 檔開頭的 tags 跟 categories 可以這樣設定，因為 landscape 主題沒用到，所以之前沒有示範過 categories 的設定，這邊補上</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/201726945UfPoggvXt.png" alt="文章 categories 的設定"></p><p>有文章有設定 categories 之後，再回去看網站就會看見分類項目的數量變成 1 了</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694MP9RjFUcY7.png" alt="分類項目數量改變"></p><ul><li><strong>description</strong></li></ul><p>前面有說到如何讓首頁的文章只顯示部分內文，只要在文章中想截斷的地方加入 <code>&lt;!--more--&gt;</code>，首頁就會只顯示部份內文，然後多出一個 read more 按鈕，讓瀏覽者點擊查看全文</p><p>在 NexT 主題還有提供另一個產生 read more 按鈕的方法，跟 <code>&lt;!--more--&gt;</code> 不同的地方是，這個方法可以讓你自訂要顯示的內容是什麼，那就是在文章開頭設定 description</p><p>首先在一篇文章的 md 檔開頭加入 description，然後寫入想在首頁文章卡片顯示的文字內容</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694Ofese6QUqy.png" alt="文章開頭 description 設定"></p><p>完成後重整網站，查看首頁就會看見文章卡片顯示的是，剛剛 description 設定的內容</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694GrpHDOgt7B.png" alt="首頁文章卡片顯示 description 的內容"></p><hr><h3 id="調整不同模板樣式"><a href="#調整不同模板樣式" class="headerlink" title="調整不同模板樣式"></a>調整不同模板樣式</h3><p>NexT 主題本身有提供 4 種不同模板樣式，示範網站如下：</p><ul><li><a href="https://theme-next.js.org/muse/">Muse</a></li><li><a href="https://theme-next.js.org/mist/">Mist</a></li><li><a href="https://theme-next.js.org/pisces/">Pisces</a></li><li><a href="https://theme-next.js.org/">Gemini</a></li></ul><p>這邊示範網站提供的是暗色的主題樣式，在還沒調整設定之前預設會是亮色的主題樣式，兩者主要只是以黑或白為主色的差別而已<br>在調整色系前，先來看看如何調整不同模板樣式吧 ~ 順便給大家看看 4 種不同亮色的主題長什麼樣</p><p>調整模板樣式的方式很簡單，找到 scheme 改成你想要的模板樣式名稱就可以囉 ~</p><p>假設我要改成 Gemini 這個樣式，只要把原本的樣式註解掉，再解除想要樣式的註解，就會套用這個樣式的主題了<br><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694UFsWBnxv81.png" alt="修改主題的 scheme 設定"></p><p>亮色的 4 種不同模板樣式網站畫面：</p><ul><li><p>Muse<br><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694OLK7ey0pX8.png" alt="亮色的 Muse 樣式"></p></li><li><p>Mist<br><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694t7S9xQ6rGO.png" alt="亮色的 Mist 樣式"></p></li><li><p>Pisces<br><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694YAwzbE9hs3.png" alt="亮色的 Pisces 樣式"></p></li><li><p>Gemini<br><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694huIia5q6If.png" alt="亮色的 Gemini 樣式"></p></li></ul><hr><h3 id="調整明暗主題色系"><a href="#調整明暗主題色系" class="headerlink" title="調整明暗主題色系"></a>調整明暗主題色系</h3><p>除此之外，NexT 主題還可以選擇明暗色系的主題樣式，這對於喜歡暗色系網站的我來說就是福音，白色對我來說太明亮了 <del>太耀眼了，看太久會被消滅</del></p><p>調整方式也很簡單，只要在 NexT 主題的 config 檔中，把 darkmode 改成 true，就可以開啟 <del>暗黑模式</del> 暗色系的主題樣式囉 ~</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694n030vsX3rY.png" alt="darkmode 改成 true"></p><p>然後重整網站，搭啦 ~ 網站就變成暗色系的主題樣式了🪄</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694v1mtpwVmvE.png" alt="網站變成暗色系樣式"></p><hr><h3 id="favicon、logo、作者頭像設定"><a href="#favicon、logo、作者頭像設定" class="headerlink" title="favicon、logo、作者頭像設定"></a>favicon、logo、作者頭像設定</h3><p>如果你自己有設計網站的 logo，或是自己的頭像，NexT 主題也可以幫你把這些圖片客製到你的網站上</p><p>先說 logo 的部分，找到以下片段，這邊可以調整網站的 favicon 和 logo，這兩個部分的相關設定</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694yvKnQ2kotk.png" alt="設定 favicon、logo 的片段"></p><h4 id="favicon"><a href="#favicon" class="headerlink" title="favicon"></a>favicon</h4><p>favicon 就是網站頁籤紅框處的這個圖片，通常會放 logo，這部分就要用 favicon</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694YLjgbL8GDM.png" alt="網站 favicon 的位置"></p><p>上面提到的網站頁籤圖片就要靠 <code>favicon</code> 下的設定來調整，你會看見 small 跟 medium … 各個項目，每個設定都有一串圖片路徑，它們來自一個 images 的資料夾</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">favicon:</span></span><br><span class="line">  <span class="attr">small:</span> <span class="string">/images/favicon-16x16-next.png</span></span><br><span class="line">  <span class="attr">medium:</span> <span class="string">/images/favicon-32x32-next.png</span></span><br><span class="line">  <span class="attr">apple_touch_icon:</span> <span class="string">/images/apple-touch-icon-next.png</span></span><br><span class="line">  <span class="attr">safari_pinned_tab:</span> <span class="string">/images/logo.svg</span></span><br><span class="line">  <span class="comment">#android_manifest: /manifest.json</span></span><br></pre></td></tr></table></figure><p>images 資料夾在 <code>themes/next/source</code> 路徑下，打開來你就會看到主題預設給你的 logo 跟頭像圖片</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694ljwFueAmrR.png" alt="images 資料夾內容"></p><p>接下來就是依照預設圖片的尺寸，去設計 favicon 的圖檔，然後把 <code>favicon</code> 下的圖片路徑改成新的圖片路徑即可，假如 small 要改成套用 images 資料夾中 <code>favicon-small.png</code> 這個檔案的話，路徑就要改成以下這樣</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">small:</span> <span class="string">/images/favicon-small.png</span></span><br></pre></td></tr></table></figure><p>我自己是把 <code>favicon</code> 下的沒註解掉的項目，都改成自己的 logo 了，但你可以看自己的需求做調整就好</p><h4 id="logo"><a href="#logo" class="headerlink" title="logo"></a>logo</h4><p>接下來調整網站的 logo 圖片，找到以下片段，備註有說 Mist 樣式不支援客製化 logo 的設定，所以選擇 Mist 樣式的朋友，如果有這項需求可以考慮換成其他樣式<br><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694YVbMJ8O9uH.png" alt="設定 logo 的片段"></p><p>跟上面的 favicon 一樣，可以把設計的 logo 圖檔放到 images 資料夾中，然後再調整圖片路徑，假設我要改成 images 中 <code>logo.png</code> 這個圖檔，那路徑就要改成以下這樣</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">custom_logo:</span> <span class="string">/images/logo.png</span></span><br></pre></td></tr></table></figure><p>設定好之後回到網站重整，就可以看見網站上多出了 logo 的圖片<br><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694TZPjFJM94x.png" alt="網站多出了 logo 的圖片"></p><p>不同樣式 logo 位置可能會不同，這邊就不一一示範，留給大家去嘗試囉 ~</p><h4 id="作者頭像"><a href="#作者頭像" class="headerlink" title="作者頭像"></a>作者頭像</h4><p>如果你有自己想放的頭像，NexT 主題也有提供一個地方讓你放頭像的圖片路徑</p><p>找到以下的 <code>avatar</code> 片段，然後跟前面設定方式一樣，在 images 資料夾放入你想放的頭像圖檔，然後修改 url 的圖片路徑設定</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694CXGxKRDDMB.png" alt="avatar 片段內容"></p><p>假設要放的圖檔名稱是 <code>myphoto.png</code>，url 這項的路徑就要改成以下這樣</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">url:</span> <span class="comment">#/images/myphoto.png</span></span><br></pre></td></tr></table></figure><p>設定後回到首頁就可以看見側欄出現了剛剛設定的頭像</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694cNaLWylnz4.png" alt="側欄出現頭像"></p><p>再來這個片段還有 2 個設定：<code>rounded</code> 跟 <code>rotated</code></p><p>把 <code>rounded</code> 設定為 <code>true</code> 可以將頭像裁切成圓形，呈現畫面如下</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694MZi4Dk4VTx.png" alt="側欄頭像變圓形"></p><p>而 <code>rotated</code> 設定為 <code>true</code> 可以讓頭像新增一個 hover 的動畫效果，當瀏覽者把滑鼠移到頭像上時，頭像會像唱片一樣旋轉，這個效果就留給大家嘗試看看喜不喜歡囉 ~</p><hr><h3 id="社群連結按鈕"><a href="#社群連結按鈕" class="headerlink" title="社群連結按鈕"></a>社群連結按鈕</h3><p>既然說到了作者頭像如何設定，那就接著講如何設定你的社群連結按鈕吧 ~</p><p>找到以下片段，<code>social</code> 下預設註解就有一些常用的社群連結及 icon 圖案設定，也可以另外新增其他的社群媒體連結及 icon 圖案</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694mdfGeMipYT.png" alt="social 片段"></p><p>這邊的 icon 修改方式跟 menu 選單項目設定的方式一樣，找到想要的 icon 代碼加入即可</p><p>假設我想新增 Discord 的社群按鈕，我找到 Font Awesome 中 icon 代碼是 <code>fa-brands fa-discord</code>，那就可以新增 Discord 設定到 <code>social</code> 下，這邊 icon 代碼 <code>fa-brands</code> 可以簡寫成 <code>fab</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">Discord:</span> <span class="string">https://discord.com/你的Discord</span> <span class="string">||</span> <span class="string">fab</span> <span class="string">fa-discord</span></span><br></pre></td></tr></table></figure><p>設定後重整網站，就可以看見首頁側欄最下面出現剛剛設定的 Discord 社群按鈕囉 ~</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694DLC6t0n0Wk.png" alt="側欄最下面出現 Discord 社群按鈕"></p><p>再往下可以看見還有 <code>social_icons</code>，這個片段可以調整社群按鈕的 icon 設定</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">social_icons:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">icons_only:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">transition:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>每項設定介紹如下：</p><ul><li><code>enable</code>：可以設定社群按鈕是否要顯示 icon</li><li><code>icons_only</code>：可以設定社群按鈕是否要只顯示 icon、不顯示文字</li><li><code>transition</code>：可以設定是否顯示 icon 的 transition 效果</li></ul><p>transition 效果我自己其實看不太出差異，但官方文件說有這個效果，說不定有人感覺有差，那這個片段就留給大家嘗試自己喜歡的設定囉 ~</p><hr><h3 id="copy-right"><a href="#copy-right" class="headerlink" title="copy right"></a>copy right</h3><p>再來我相信一定會有人想改 copy right 預設的內容吧？我自己是很想改成其他可愛的 icon，這樣每次看到都會療癒一下，接下來就來介紹以下 copy right 預設內容如何調整吧 ~</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694vvj81hPcYu.png" alt="網站預設 copy right"></p><p>先找到以下片段<br><img src="https://ithelp.ithome.com.tw/upload/images/20250519/201726945gQ4XMewmX.png" alt="footer 片段內容"></p><p><code>footer</code> 下會有 <code>icon</code>、<code>copyright</code>、<code>powered</code> 三個設定，這三個設定可以用來調整網站 footer 區塊的 copy right 內容</p><ul><li><code>icon</code>：有 <code>name</code>、<code>animated</code>、<code>color</code> 這三項，可以設定下圖黃框處的 icon<ul><li><code>name</code>：用來設定 Font Awesome 的 icon 圖案代碼</li><li><code>animated</code>：用來設定是否開啟讓 icon 跳動的動畫</li><li><code>color</code>：用來設定 icon 的顏色</li></ul></li><li><code>copyright</code>：可以寫入在下圖紅框處要顯示的文字，未設定會預設為全站 config 檔設定的 author 名稱，設定為 <code>false</code> 可不顯示整段 copy right 文字 ( 不包含強力驅動文字 )</li><li><code>powered</code>：可以設定是否要顯示下圖綠框處的強力驅動文字</li></ul><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694Jt7iHU61eR.png" alt="footer 片段對應網站的位置"></p><p>copy right 的文字通常會寫類似：「轉載文章時請附上作者名及原文連結」的內容，然後我自己是會關閉強力驅動的文字，改一個喜歡的 icon 圖案、換顏色再加動畫 <del>會跳動的 icon 比較可愛</del></p><p>示範一下設定內容</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">icon:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">fa</span> <span class="string">fa-user-astronaut</span></span><br><span class="line">  <span class="attr">animated:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">&quot;#0080FF&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">copyright:</span> <span class="string">轉載文章時請附上作者名及原文連結</span></span><br><span class="line"></span><br><span class="line"><span class="attr">powered:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>設定後重整網站，footer 就會變更成新設定的內容囉 ~<br><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694HI5xQpqRuy.png" alt="copy right 區塊網站內容"></p><p>這邊大家可以實際操作設定自己的 copy right 內容，看看自己比較喜歡哪種設定</p><h3 id="如何調整文章開頭的顯示文字"><a href="#如何調整文章開頭的顯示文字" class="headerlink" title="如何調整文章開頭的顯示文字"></a>如何調整文章開頭的顯示文字</h3><p>再來我想應該會有人，想調整下圖紅框處文章開頭的這串文字吧？如果用預設再加上有分類項目的話，感覺確實資訊很多很雜</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694uw0BBuYw5v.png" alt="網站文字開頭資訊"></p><p>首先先找到以下片段<br><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694H2ksQASP4X.png" alt="post_meta 片段內容"></p><p><code>post_meta</code> 這個片段可以用來調整文章開頭的區塊要顯示哪些內容</p><ul><li><p><code>item_text</code>：用來設定是否要顯示項目前方的「發表於」、「更新於」、「分類於」文字 ( 如下圖黃框處 )<br><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694sCV3F2nFno.png" alt="item_text 在網站的顯示位置"></p></li><li><p><code>created_at</code>：用來設定是否要顯示文章的發表日期 ( 如下圖綠框處 )<br><img src="https://ithelp.ithome.com.tw/upload/images/20250519/201726946O6GMIcSBE.png" alt="created_at 在網站的顯示位置"></p></li><li><p><code>update_at</code>：用來設定文章更新時間 ( 如下圖藍框處 ) 的顯示方式<br><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694OjN6CKSZoX.png" alt="update_at 在網站的顯示位置"></p><ul><li><code>enable</code>：用來設定是否要顯示文章的更新日期</li><li><code>another_day</code>：用來設定當發表日期和更新日期相同時，是否要顯示文章的更新時間，<code>true</code> 會不顯示更新時間、<code>false</code> 則會顯示更新時間</li></ul></li><li><p><code>categories</code>：用來設定是否要顯示文章的分類項目 ( 如下圖橘框處 )<br><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694ZX0qDYajEc.png" alt="categories 在網站的顯示位置"></p></li></ul><p>這邊就讓大家試試看要顯示哪些內容在文章標題下方囉 ~</p><hr><h3 id="客製化檔案路徑"><a href="#客製化檔案路徑" class="headerlink" title="客製化檔案路徑"></a>客製化檔案路徑</h3><p>如果你有自己寫的程式碼想要加入網站中的某些區塊，NexT 主題有提供一個區塊 <code>custom_file_path</code>，讓使用者可以設定客製的檔案路徑</p><p><code>custom_file_path</code> 區域上方的註解有說明，可以新增客製化檔案到 <code>source/_data</code> 路徑下，也可以用以下預設內容來新增不同網站部分的客製化檔案<br><img src="https://ithelp.ithome.com.tw/upload/images/20250519/2017269428UT0JD0PO.png" alt="custom_file_path 片段位置"></p><p>這部分如果有需要可以多多運用，裡面還可以自己設定網站的樣式變數、也可以新增自己的 <code>styles.styl</code> 檔讓網站套用你寫的樣式檔，另外還可以針對網站結構也做客製，這邊看到可以新增不同部分的 njk 檔</p><hr><h3 id="更多檔案中的設定"><a href="#更多檔案中的設定" class="headerlink" title="更多檔案中的設定"></a>更多檔案中的設定</h3><p>其實 NexT 主題 config 檔中的設定還蠻多的，這裡介紹的只是一部份我想分享的設定，也推薦大家客製化遇到問題可以先探索一下這個檔案，如果有遇到想了解的設定也可以參考官方文件，多多探索可以幫助你更快掌握如何客製化</p><h2 id="客製化修改程式碼"><a href="#客製化修改程式碼" class="headerlink" title="客製化修改程式碼"></a>客製化修改程式碼</h2><p>雖然有一些網站部分內容的客製化，可以透過上面提到的 NexT 主題 config 檔來設定達成，但是可能會有些東西你很想客製化，卻無法透過以上方法來調整設定</p><p>這時候就需要直接修改主題檔案的程式碼了，而在 NexT 主題修改的方式其實很類似之前客製化 landscape 主題的做法，只是檔案名稱和位置可能會不同，所以需要另外研究跟適應</p><p>但如果要直接修改原本檔案的程式碼，一樣會建議修改時用註解標記新增了哪些程式碼區段，或是把原本的設定值註解保留，以防後續需要更新主題版本時，無法對照修改了哪些程式碼</p><p>雖然通常不是想用新功能或是網站有出什麼問題，是不會主動去更新主題版本的，所以上面的建議就是一個以防萬一的準備</p><p>接下來就針對需要修改 NexT 主題本身檔案的程式碼時，如何找到該程式碼的檔案位置來做介紹</p><hr><h3 id="njk-檔是什麼？"><a href="#njk-檔是什麼？" class="headerlink" title="njk 檔是什麼？"></a>njk 檔是什麼？</h3><p>還記得之前 landscape 主題客製化，有介紹到一個統整所有頁面結構的檔案叫 <code>layout.ejs</code>，在 NexT 主題也有這樣的檔案，一樣在 layout 資料夾，但是它的檔名是 <code>_layout.njk</code></p><p>如果你點開在 <code>themes/next/layout</code> 路徑下的 <code>_layout.njk</code> 檔，你會發現這個 njk 檔的內容和之前介紹的 EJS 樣版語言很類似</p><p>沒錯，它也是一種樣板語言，叫 Nunjucks ( 以下簡稱 njk )，它跟 EJS 一樣可以加入 JavaScript 到 HTML 片段中，也可以引入其他檔案的內容</p><p>只是語法上有些不同，EJS 是用 <code>&lt;%- %&gt;</code> 符號包住程式碼，njk 則是用 <code>&#123;%  %&#125;</code> 包住程式碼，如果想更深入了解這個語言的寫法可以參考 <a href="https://nunjucks.bootcss.com/templating.html">Nunjucks 的官網文件</a></p><hr><h3 id="如何找到要客製的-HTML-程式碼片段"><a href="#如何找到要客製的-HTML-程式碼片段" class="headerlink" title="如何找到要客製的 HTML 程式碼片段"></a>如何找到要客製的 HTML 程式碼片段</h3><p>這邊會再簡單介紹在 NexT 主題，如何尋找被引入 <code>_layout.njk</code> 的檔案所在位置</p><p>以網站 HTML 的 head 區塊為例，假設我想找到第 4 行被引入的檔案在哪，下圖程式碼可以看見 <code>_partials/head/head.njk</code> 這樣的內容</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694D88MQ93zB6.png" alt="_layout.njk 的 head 區塊"></p><p>所以可以知道第 4 行被引入的檔案，在 <code>_partials</code> 內的 <code>head</code> 資料夾，檔名是 <code>head.njk</code>，打開這個檔案就可以看見引入的內容是什麼了</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694P4dzf8Pwmt.png" alt="head.njk 檔內容"></p><p>接下來為了驗證，我們回到網站打開發者工具，查看 Elements 中網站的 <code>&lt;head&gt;</code> 起始標籤後第一行，是否和 <code>head.njk</code> 裡的第一行：<code>&lt;meta charset=&quot;UTF-8&quot;&gt;</code> 一樣</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694OXTJAKvXau.png" alt="開發者工具 head 程式碼內容"></p><p>看完上面的介紹，是不是覺得和 landscape 主題客製化的做法很像？之後如果需要客製化某個網站部分，也可以依照上面方式查找驗證，然後嘗試修改再觀察網站畫面的變化</p><hr><h3 id="如何找到要客製的-CSS-程式碼片段"><a href="#如何找到要客製的-CSS-程式碼片段" class="headerlink" title="如何找到要客製的 CSS 程式碼片段"></a>如何找到要客製的 CSS 程式碼片段</h3><p>在 NexT 主題中也有類似 landscape 主題的 <code>style.styl</code> 檔，它就是在 <code>themes/next/source/css</code> 路徑下的 <code>main.styl</code> 檔 ( 如下 )</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694kJ7nRaJLaZ.png" alt="main.styl 檔的內容"></p><p>這個檔案可以看到被引入的 styl 檔在哪裡，以 <code>@import &#39;_variables/base&#39;;</code> 來說，引入的檔案是 <code>_variables</code> 資料夾內的 <code>base.styl</code> 檔</p><p>前面有介紹 NexT 主題有 4 種不同的模板樣式，不同模板樣式會有不同的樣式變數，所以當點開 <code>_variables</code> 資料夾，你還會看到其他 4 個以樣式模板名稱命名的 styl 檔案</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694V8D87bfhih.png" alt="_variables 資料夾內的檔案"></p><p>再對照 <code>main.styl</code> 檔，模板樣式變數的引入位置，是在 <code>base.styl</code> 檔之後 ( 下圖紅框處 ) ，那麼就可以知道後面引入的檔案內容，會覆蓋前面引入的設定內容</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/201726949nxtnpQljM.png" alt="模板樣式變數的引入位置"></p><p>也就是說假設你調整了 base 檔的變數設定，卻沒反應可以到你使用的模板樣式變數檔看看，是否有一樣名稱的變數把 base 檔的設定覆蓋了</p><p>了解如何尋找被引入的檔案在哪之後，如果有想客製化修改的樣式，修改步驟就會和 landscape 主題在客製化時的方式很類似</p><p>只要利用開發者工具找到要修改的 CSS 程式碼大約在哪，在回到 <code>main.styl</code> 檔尋找該程式碼可能在哪個檔案中，就可以修改看看、觀察網站樣式是否有變動，如果有的話就恭喜你找到它囉🎉</p><p>補充：styl 檔除了 CSS 之外也可以寫 SCSS 喔 ~ 有 SCSS 就能更有效率的寫網站樣式的程式碼了</p><hr><h3 id="補充：languages-資料夾介紹"><a href="#補充：languages-資料夾介紹" class="headerlink" title="補充：languages 資料夾介紹"></a>補充：languages 資料夾介紹</h3><p>在 next 資料夾中有一個 languages 的資料夾，點開裡面會有各種語言的翻譯文字，繁體中文在 <code>zh-TW.yml</code> 檔內，所以如果有文字翻譯想調整，可以來看看是否有在這個檔案中</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694Zii5TvXf8n.png" alt="zh-TW.yml 檔案內容"></p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>這篇文章前面主要簡單介紹 NexT 主題的 config 檔在客製化上面有哪些設定，後面才提到如果有直接修改原本檔案的需求時，要怎麼找到想找的程式碼在哪</p><p>我本人比較懶，所以 NexT 主題的 config 檔直接設定一些內容，真的很棒 ~ 如果你正在努力客製 NexT 主題 Hexo 網站，希望這篇文章能幫助你製作出你理想的 Hexo 網站</p><p>那我們就下篇文章見囉 ~</p>]]></content>
    
    
    <summary type="html">介紹 NexT 主題的 config 檔的客製化設定，及如何尋找程式碼的技巧</summary>
    
    
    
    <category term="Hexo" scheme="http://amy6072698.github.io/amy10blog/categories/Hexo/"/>
    
    
    <category term="Hexo" scheme="http://amy6072698.github.io/amy10blog/tags/Hexo/"/>
    
    <category term="前端" scheme="http://amy6072698.github.io/amy10blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>從零開始學 Hexo (9) | Hexo 主題選擇及更換網站主題</title>
    <link href="http://amy6072698.github.io/amy10blog/2025/04/29/20250429-hexo-learning9/"/>
    <id>http://amy6072698.github.io/amy10blog/2025/04/29/20250429-hexo-learning9/</id>
    <published>2025-04-29T15:15:43.000Z</published>
    <updated>2025-05-19T15:56:29.446Z</updated>
    
    <content type="html"><![CDATA[<h2 id="關於-Hexo-主題挑選"><a href="#關於-Hexo-主題挑選" class="headerlink" title="關於 Hexo 主題挑選"></a>關於 Hexo 主題挑選</h2><p>Hexo 的主題不只有 landscape 這一種，還有許許多多的主題模板可以套用，進入 <a href="https://hexo.io/themes/">Hexo 官網的主題頁面</a>，你就能看見很多主題</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694OpdIEeJvSu.png" alt="Hexo 官網的主題頁面"></p><p>點擊任一個主題標題名稱 ( 如上圖紅框處 )，可以進入該主題的 GitHub 頁面，裡面會有主題的安裝方式、使用說明等資訊</p><p>如果想看套用該主題的範例網站，就點擊「Visit preview site」( 如上圖綠框處 )</p><p>有很多主題可以選當然好，但是選擇障礙就出來了，挑選主題有沒有什麼需要注意的事項呢？</p><p>當然有，接下來就來針對挑選主題要注意的點來說明吧 ~</p><h3 id="有實力有經驗也不懶怎麼選都行"><a href="#有實力有經驗也不懶怎麼選都行" class="headerlink" title="有實力有經驗也不懶怎麼選都行"></a>有實力有經驗也不懶怎麼選都行</h3><p>如果你有一定開發實力，且有開發過主題的經驗，然後也不懶熱衷於挑戰 (？，那麼你想挑什麼主題都可以，反正有問題可以自己改👍</p><p>但如果你跟我一樣比較懶，可以根據以下提到的兩點挑選主題，可以少一些研究主題的時間，更專注在部落格經營及技術文章撰寫上</p><ul><li><strong>挑選有持續維護的主題</strong></li><li><strong>挑選熱門的主題</strong></li></ul><h3 id="挑選有持續維護的主題"><a href="#挑選有持續維護的主題" class="headerlink" title="挑選有持續維護的主題"></a>挑選有持續維護的主題</h3><p>前面有說可以透過 Hexo 官網的主題頁面，進入到該主題的 GitHub 頁面，在這邊可以看見主題的一些相關資訊</p><p>以 <a href="https://github.com/next-theme/hexo-theme-next">NexT</a> 這個主題為例，下圖紅框處可以看見更新專案的時間，這邊可以看到上個月甚至昨天都有更新</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/201726945u7gUAbe4k.png" alt="NexT 主題的 GitHub 頁面"></p><p>這個更新的時間，可以作為這個主題是否有持續維護的判斷標準，如果更新時間是好幾年前，那表示這個主題已經很久沒有更新維護了</p><p>這樣對於使用較新版本 Hexo 的使用者來說，可能不是一個好選項，因為沒有持續維護的主題，可能會與現在使用的 Hexo 版本不相容，主題無法被新版本的 Hexo 編譯，就只能放棄這個主題了</p><p>除非有足夠實力自己修正問題，不然建議選擇有持續維護的主題套用，避免以上的狀況發生</p><h3 id="挑選熱門的主題"><a href="#挑選熱門的主題" class="headerlink" title="挑選熱門的主題"></a>挑選熱門的主題</h3><p>另一個挑選主題的重點是挑選熱門的主題，那要如何判斷我選的主題熱不熱門呢？</p><p>一個主題熱不熱門，除了搜尋主題名稱，查看網路上相關技術文章的數量之外，也可以透過該主題的 GitHub 頁面找到一些蛛絲馬跡</p><p>頁面右上的這個星星數量就可以作為判斷，星星數量越多越熱門</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694K4zi2b5tgU.png" alt=" GitHub 頁面星星數量"></p><p>另外 Issues 的數量也可以當作判斷標準，熱門的主題因為比較多人使用，就容易有較多人在使用上遇到問題，然後到 GitHub 頁面尋求協助，所以主題的 Issues 數量越多越熱門</p><p>像是 <a href="https://github.com/next-theme/hexo-theme-next/issues">NexT 主題 GitHub 的 Issues 分頁</a>，下圖黃框處已解決 ( Closed ) 的 Issue 就算蠻多的了</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694ZrDmWd6SCz.png" alt=" GitHub 頁面 Issues 數量"></p><p>會建議挑選熱門的主題，是因為社群針對熱門主題的討論度較高，這樣未來若遇到實作上的問題，可以參考學習的資源也較多</p><h2 id="更換-Hexo-網站主題"><a href="#更換-Hexo-網站主題" class="headerlink" title="更換 Hexo 網站主題"></a>更換 Hexo 網站主題</h2><p>我的個人部落格主題是使用 NexT 主題，所以接下來會以 NexT 主題來示範，如何更換 Hexo 網站的主題</p><p>我們知道原本 Hexo 網站的主題，預設是套用 landscape，假設現在我們想把網站主題換成 NexT 主題，要怎麼做呢？</p><ul><li><strong>注意</strong>：如果前面有針對 landscape 主題客製化，為避免調整影響到 NexT 主題的套用，建議重新建立一個新的 Hexo 部落格環境或移除客製化設定，再依照以下步驟更換主題</li></ul><p>首先，先進入到 <a href="https://github.com/next-theme/hexo-theme-next">NexT 主題的 GitHub 頁面</a>，滑到頁面下方會看到 README 裡有安裝方法</p><p>Installation 列出兩種安裝方式，一種是透過 npm 但 Hexo 版本要 5.0 或以上，另一種是用 git clone 的方式<br><img src="https://ithelp.ithome.com.tw/upload/images/20250519/201726946uYRhGVzAP.png" alt="NexT 主題 Installation"></p><p>這邊示範採用 git clone 的方式安裝主題，開啟終端機注意是否在 Hexo 部落格資料夾的路徑上，是的話執行以下指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/next-theme/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><p>執行後打開 themes 資料夾，可以看到多了一個 next 的主題資料夾</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694AudyMQ9GdX.png" alt="next 資料夾位置"></p><p>接下來打開全站的 config 檔，找到 theme 把 landscape 改成 next</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694tqFKQibUB2.png" alt="修改全站設定的 theme"></p><p>修改後儲存再打開 Hexo 伺服器，點開網址就可以看見網站被改成 NexT 主題的樣式囉 ~</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694XmMRzK08rP.png" alt="NexT 主題網站樣式"></p><p>如果要更換成其他主題，也是差不多的方式，參考該主題的安裝方式先進行主題安裝，再調整全站 config 的 theme 設定</p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>這篇文章介紹了如何挑選你的 Hexo 網站主題，以及如何安裝並更換主題，看完這篇文章大家可以試著挑選喜歡且合適的主題囉 ~</p><p>希望大家都可以有美美的 Hexo 網站，每個主題客製化上面設定可能會不一樣，但前篇文章提到的客製化方法，應該多少還是可以作為實作時的參考</p><p>接下來文章因為我個人創建自己的部落格，研究比較多的是 NexT 主題，所以會以如何客製化 NexT 主題為主要方向</p><p>那我們就下篇文章見囉 ~</p>]]></content>
    
    
    <summary type="html">介紹挑選 Hexo 網站主題的注意事項，及如何安裝並更換主題</summary>
    
    
    
    <category term="Hexo" scheme="http://amy6072698.github.io/amy10blog/categories/Hexo/"/>
    
    
    <category term="Hexo" scheme="http://amy6072698.github.io/amy10blog/tags/Hexo/"/>
    
    <category term="前端" scheme="http://amy6072698.github.io/amy10blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>從零開始學 Hexo (8) | landscape 主題如何客製 Hexo 首頁</title>
    <link href="http://amy6072698.github.io/amy10blog/2025/04/28/20250428-hexo-learning8/"/>
    <id>http://amy6072698.github.io/amy10blog/2025/04/28/20250428-hexo-learning8/</id>
    <published>2025-04-28T13:15:00.000Z</published>
    <updated>2025-05-19T15:57:12.880Z</updated>
    
    <content type="html"><![CDATA[<h2 id="激發你的客製魂"><a href="#激發你的客製魂" class="headerlink" title="激發你的客製魂"></a>激發你的客製魂</h2><p>經過前面的努力我們終於把 Hexo 網站部署到 GitHub Pages 了，但是這樣用主題模板套用的固定結構、樣式的網站，滿意嗎？</p><p>沒錯！我們不滿意！這篇文章就是來激發你的客製魂的，接下來就開始介紹如何用預設主題 landscape 來客製化你的 Hexo 網站吧 ~</p><h2 id="EJS-樣版語言"><a href="#EJS-樣版語言" class="headerlink" title="EJS 樣版語言"></a>EJS 樣版語言</h2><p>開始客製化之前需要先認識一下 EJS 這個樣版語言，這邊會簡單先講解它的作用，如果想深入了解語法可以到 <a href="https://ejs.bootcss.com/#docs">EJS 官網文件</a>查看官方說明</p><p>仔細觀察你應該會發現你寫的每篇文章頁面，網頁的結構跟樣式都很相似，唯一不同的是文章內容</p><p>前面提過只要在 <code>source/_posts</code> 資料夾的 md 檔內寫入文章內容，文章內容就會更新到該文章的頁面上，不需要每篇文章都新增一個不同的 HTML 檔…</p><p>而 landscape 主題就是使用 EJS，做到把網站中重複部分拆分成不同 EJS 檔，再將每個部分的結構和不同資料內容，整合到一個 <code>layout.ejs</code> 的檔案中</p><p>簡單來說 EJS 樣版語言，可以做到把網頁結構跟資料組合成一個個看起來結構很像，但顯示資料卻不同的網頁 ( 像每篇文章頁面一樣 )</p><p>比較以下 Hexo 的文章頁面，網頁的結構、樣式都一樣，只有文章內容不同</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694DXCgVkXtw9.png" alt=" Hexo 文章頁面 1"><br><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694eiZK7BnfZg.png" alt=" Hexo 文章頁面 2"></p><h2 id="layout-ejs-檔案"><a href="#layout-ejs-檔案" class="headerlink" title="layout.ejs 檔案"></a>layout.ejs 檔案</h2><p>前有提到網站的結構跟資料會整合到一個 <code>layout.ejs</code> 的檔案中，那接下來就看看這個檔案，試著調整看看會對網頁產生什麼改變吧 ~</p><p>首先點開 themes 底下的 landscape 資料夾，在點開裡面的 layout 資料夾，就會看見 <code>layout.ejs</code> 的檔案，點開它你會發現檔案的內容很像 HTML，但是又混合一些用 <code>&lt;%- %&gt;</code> 包住的程式碼</p><p><code>&lt;%- %&gt;</code> 內可以寫入 JavaScript 控制網站結構，也可以匯入其他檔案的內容到 <code>layout.ejs</code> 檔中，匯入的結構或資料會放在 <code>&lt;%- %&gt;</code> 程式碼所在的位置</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694OgBZpWQr1B.png" alt=" layout.ejs 檔案"></p><p>先看 <code>&lt;%- partial(&#39;_partial/head&#39;) %&gt;</code> 這個片段，在這行程式碼的位置引入了網站的 head，被引入的是在 <code>_partial</code> 資料夾內的 <code>head.ejs</code> 中的內容</p><p>點開檔案可以看到確實有 <code>&lt;head&gt;</code> 標籤和 head 裡面會有的內容</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694Km4xhLRGIs.png" alt=" head.ejs 檔案"></p><hr><h3 id="不確定引入的是不是這個檔案怎麼辦？"><a href="#不確定引入的是不是這個檔案怎麼辦？" class="headerlink" title="不確定引入的是不是這個檔案怎麼辦？"></a>不確定引入的是不是這個檔案怎麼辦？</h3><p>雖然現在知道怎麼找被引入檔案的位置，但如果不確定到底引入的是不是這個檔案，要怎麼辦？</p><p>這時候可以試著修改那個檔案的內容，觀察網站結構是否改變，現在模擬一下情境：</p><p>假設我想加入文字到網站的 footer 位置，這時候我開啟 Hexo 伺服器，點開本地端的網站連結，打開 Chrome 的開發者工具，查看 Elements 的 HTML 結構，發現 footer 的區塊被包在 <code>&lt;div id=&quot;wrap&quot;&gt;</code> 的最後面</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694nx5IU5RqRU.png" alt=" Elements 開發者工具 footer 位置"></p><p>這時候我回到 <code>layout.ejs</code> 檔，尋找 footer 區塊的對應位置，發現它可能在第 14 行</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694ZHtEhaq0fP.png" alt=" layout.ejs 第 14 行"></p><p>第 14 行程式碼有看到 <code>partial(&#39;_partial/footer&#39;</code> 這樣的內容，所以我覺得被引入的是 <code>_partial</code> 資料夾內的 <code>footer.ejs</code> 檔，但我不太確定，就先在這個檔案內嘗試加入一行字</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694Q2p0SzBz5J.png" alt=" footer.ejs 修改"></p><p>加入文字後儲存再重新整理網站，footer 確實有加入我剛剛輸入的文字內容，所以被引入的檔案就是 <code>footer.ejs</code> </p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694ZORy0QJsgM.png" alt="重新整理網站 footer 結果"></p><p>經過上面示範的模擬情境，應該就比較知道要如何找到你要客製化的部分在哪，以及不確定時要怎麼驗證了，來嘗試找找想客製的部分在哪個檔案中吧 ~</p><h2 id="怎麼客製化滿版頁面"><a href="#怎麼客製化滿版頁面" class="headerlink" title="怎麼客製化滿版頁面"></a>怎麼客製化滿版頁面</h2><p>如果去看 Hexo 網站的每個頁面，你會發現右側都有一個側欄選單，如果想讓關於或是首頁變成沒有側欄選單的滿版頁面，要怎麼做呢？</p><p>還記得前面有提到，如何用文章 md 檔的開頭調整文章細節嗎？接下來就可以運用這個方法，讓你可以控制頁面是否要滿版顯示</p><p>假設我希望關於頁面可以滿版顯示，先打開 <code>source/about</code> 下的 <code>index.md</code> 檔，在開頭加入自訂的內容：<code>fullPage: true</code></p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694z6jKtvV9P7.png" alt="關於頁面 md 檔的開頭設定"></p><p>看到小駝峰的命名方式應該可以預感到，沒錯… 接下來就是 JavaScript 登場的時候的，接下來會寫入一些 JavaScript 的內容到 <code>layout.ejs</code> 中</p><p>但首先，要先找到我們想去除的側欄選單在檔案中的哪個位置，這時候就是依照前面的步驟，先在 Chrome 的開發者工具的 Elements 內，找到側欄選單的 HTML 結構位置</p><p>你會發現它在 <code>&lt;div class=&quot;outer&quot;&gt;</code> 內</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694PTPAevByKF.png" alt=" Elements 側欄選單位置"></p><p>然後就是找到 <code>layout.ejs</code> 檔案中對應的位置：第 10 ~ 12 行</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694rBGpjpG9F4.png" alt=" layout.ejs 第 10 ~ 12 行"></p><p>再來就是在第 10 行 <code>if (</code> 後面寫入 JavaScript 判斷，修改後程式碼如下，這樣當 fullPage 是 ture 就不會顯示側欄選單</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (!page.fullPage &amp;&amp; theme.sidebar &amp;&amp; theme.sidebar !== &#x27;bottom&#x27;)&#123; %&gt;</span><br></pre></td></tr></table></figure><p>加入後儲存再查看關於頁面右邊的側欄消失了</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/201726947eXhg3Soh5.png" alt="關於頁面側欄消失"></p><hr><h3 id="滿版-CSS-樣式調整"><a href="#滿版-CSS-樣式調整" class="headerlink" title="滿版 CSS 樣式調整"></a>滿版 CSS 樣式調整</h3><p>接下來你會發現側欄是消失了，但是左邊區塊怎麼沒有滿版向右邊延伸？</p><p>那就要靠 CSS 的力量來調整了，但是如果直接改控制排版的 CSS 屬性，可能會連其他頁面版面都一起被調整，所以這時候就需要透過新增一個 class，來增加 CSS 權重用覆蓋方式，蓋掉原本 landscape 預設的樣式</p><p>先用開發者工具找到是誰在控制頁面排版，這邊可以看到控制頁面排版的 CSS 屬性設定是 <code>float: left;</code>，選擇器是用 <code>#main</code></p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694waRqhgWjVu.png" alt="控制頁面排版的 CSS 屬性"></p><p>接下來回到 <code>layout.ejs</code> 檔案，找到 container 然後加入 class 屬性，class 屬性值寫入 JS 判斷讓 fullPage 為 true 時，再加入 fullPage 這個值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;container&quot; &lt;%- page.fullPage ? &#x27;class=&quot;fullPage&quot;&#x27; : &#x27;&#x27; %&gt;&gt;</span><br></pre></td></tr></table></figure><p>回到網站查看會發現只有關於頁面，可以看見 container 多了 fullPage 這個 class，其他頁面則沒有</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/201726949jDMJAUVze.png" alt="關於頁面多了 fullPage 這個 class"></p><p>再來就是調整 CSS 啦 ~ 因為還沒講到 CSS 檔案怎麼客製化調整，所以這邊先在 <code>layout.ejs</code> 的 <code>&lt;/body&gt;</code> 結尾標籤前，用 <code>&lt;style&gt;</code> 標籤直接寫入 CSS 樣式</p><p>這邊選擇器 <code>.fullPage #main</code> 權重較大，可以覆蓋原本的 CSS 預設樣式，除了把 float 改為 none 之外，也順便把 width 改成 100% <del>滿版樣式滿起來</del></p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694pC5A3B2pvV.png" alt="寫入滿版樣式"></p><p>回去查看關於頁面，就可以看見滿版頁面樣式囉 ~</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694a5YcZghaAy.png" alt="關於頁面呈現滿版"></p><h2 id="客製你的-Hexo-網站首頁"><a href="#客製你的-Hexo-網站首頁" class="headerlink" title="客製你的 Hexo 網站首頁"></a>客製你的 Hexo 網站首頁</h2><p>知道如何客製滿版頁面之後，接下來可能就會想動動網站的門面「首頁」，對 ~ 接下來就來看看怎麼讓首頁不要顯示成部落格文章列表，改成自己客製化的網頁結構囉 ~</p><p>假如我想客製化首頁，但是又想保留現在首頁的結構樣式，把它移到落落格的頁面，要怎麼做呢？</p><p>首先，先修改目前首頁的路由網址，進到全站的 config 檔，找到 <code>index_generator</code> 片段，把 <code>path</code> 這項改成 <code>&#39;/blog&#39;</code></p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694qM3imLmALb.png" alt="全站 config 首頁路由設定"></p><p>再來就是設定導覽列的網址，和前面文章提過的修改方式差不多，一樣到主題的 config 檔的 menu 設定，這邊把網址路由 <code>/archives</code> 改成 <code>/blog</code></p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694NE39Iecdrj.png" alt="修改主題的 config 檔部落格路由"></p><p>然後執行 <code>hexo clean</code> 指令清除目前的編譯檔後，重新開啟 Hexo 伺服器，點擊上方導覽列的部落格項目，進入後就會看到原本的首頁出現了</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694gSa0W73xpA.png" alt="首頁移動到部落格頁面"></p><p>接下來就是放首頁 HTML 檔的時候啦 ~ 到 source 資料夾內新增一個 <code>index.html</code> 檔案，在檔案開頭加入 title 和 fullPage 的設定，然後加入首頁的 HTML 結構</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/201726940DfKVED972.png" alt="新增首頁的 HTML 檔"></p><p>回到網站進入首頁，剛剛寫的文字就出現在首頁囉 ~</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694KbGlNYdlh1.png" alt="首頁呈現結果"></p><h2 id="CSS-樣式怎麼客製調整"><a href="#CSS-樣式怎麼客製調整" class="headerlink" title="CSS 樣式怎麼客製調整"></a>CSS 樣式怎麼客製調整</h2><p>修改好首頁之後，你可能會想要再多客製一些網站的樣式，那就需要修改主題的 CSS 樣式了</p><p>進到 <code>themes/landscape/source</code> 路徑下，會看見一個 <code>css</code> 資料夾，裡面有一個 <code>style.styl</code> 檔，打開會看到內容很像 Sass 的寫法，styl 檔其實是一個叫 <a href="https://stylus-lang.com/">Stylus</a> 的 CSS 預處理器，作用跟 Sass 很類似</p><p>如果有學過 Sass，可以試著自己修改裡面的樣式，在客製化時如果擔心直接修改，之後需要更新版本會有影響，可以註解原本的預設設定的內容，方便日後對照修改前後的內容</p><p>另外也可以使用 CSS 的方式客製樣式，前篇常見的 Hexo 指令有提到執行 <code>hexo generate</code> 指令，會產生 public 資料夾，裡面是編譯後的網站內容</p><p>沒錯，接下來就是執行 <code>hexo generate</code> 指令，然後進去 public 找到 <code>css</code> 資料夾 ，你會看見有一個 <code>style.css</code> 檔案<br><img src="https://ithelp.ithome.com.tw/upload/images/20250519/201726948grKGiJp26.png" alt=" public 裡的 style.css 檔案"></p><p>這個檔案裡是目前網站套用的 CSS 樣式，把它複製到剛剛 <code>themes/landscape/source</code> 路徑下的 <code>css</code> 資料夾內</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694m0QsAcNj1e.png" alt="複製 style.css 檔案"></p><p>然後打開 <code>style.styl</code> 檔，在最底下加入 <code>@import &quot;style.css&quot;</code> 這行程式碼，引入剛剛複製的 <code>style.css</code> 檔覆蓋原本的樣式<br><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694YtDDZwf1nN.png" alt="引入複製的 style.css 檔"></p><p>接下來就可以在剛剛複製的這個檔案中，客製化自己的網站樣式啦 ~</p><h3 id="修改導覽列項目文字顏色"><a href="#修改導覽列項目文字顏色" class="headerlink" title="修改導覽列項目文字顏色"></a>修改導覽列項目文字顏色</h3><p>假設我想修改網站上方導覽列項目的文字顏色，要怎麼做呢？</p><p>首先，一樣利用開發者工具，查看控制導覽列項目文字顏色的 CSS 屬性在哪，這邊可以發現是 <code>.nav-icon, .main-nav-link</code> 這個選擇器內的 color 屬性在控制<br><img src="https://ithelp.ithome.com.tw/upload/images/20250519/201726942vuNBWi5jl.png" alt="開發者工具畫面"></p><p>看上圖黃框處，可以知道這行程式碼在 <code>style.css</code> 檔內大約 381 行的位置，接下來就來修改 color 屬性，我要改成 pink <del>粉粉der</del></p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694JflYnd5dLB.png" alt="修改導覽列 color 屬性"></p><p>再來先執行 <code>hexo clean</code> 清除舊的編譯內容，然後再開啟 Hexo 伺服器，就可以看見上方導覽列文字 pink 起來啦 ~</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694VT5xzoXsGo.png" alt="上方導覽列文字顏色改為 pink "></p><p>接下來就可以利用以上方法，自由的在 <code>style.css</code> 檔中客製化自己的網站樣式囉 ~</p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>這篇文章介紹了如何在 landscape 主題中，客製化 Hexo 的網站樣式，這些客製方法是學習加上實作後得來的，也鼓勵大家實作遇到問題，可以多查看官方文件，或是尋找大神寫過的文章，來解決目前遇到的難題</p><p>不同 Hexo 主題在客製化上可能要修改的地方會不同，但如果可以跟上這篇的操作，就可以期許自己去研究如何客製化你更喜歡的 Hexo 主題，不用侷限在 landscape 主題</p><p>下篇文章會帶大家學了解如何挑選及更換主題，那我們就下篇文章見囉 ~</p>]]></content>
    
    
    <summary type="html">介紹如何在 landscape 主題，客製化 Hexo 的網站樣式</summary>
    
    
    
    <category term="Hexo" scheme="http://amy6072698.github.io/amy10blog/categories/Hexo/"/>
    
    
    <category term="Hexo" scheme="http://amy6072698.github.io/amy10blog/tags/Hexo/"/>
    
    <category term="前端" scheme="http://amy6072698.github.io/amy10blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>從零開始學 Hexo (7) | 部署你的落格網站與常見 Hexo 指令</title>
    <link href="http://amy6072698.github.io/amy10blog/2025/04/27/20250427-hexo-learning7/"/>
    <id>http://amy6072698.github.io/amy10blog/2025/04/27/20250427-hexo-learning7/</id>
    <published>2025-04-27T13:13:55.000Z</published>
    <updated>2025-05-19T15:57:55.562Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h2><h3 id="確認是否已安裝-git"><a href="#確認是否已安裝-git" class="headerlink" title="確認是否已安裝 git"></a>確認是否已安裝 git</h3><p>在開始往下介紹如何用部署你的 Hexo 部落格之前，我們要先確認是否有正確安裝 git，如果你是跟著前幾篇文章實作的朋友，基本上是不用擔心沒有安裝的，因為安裝 Hexo 前，官網的文件就有說明要先安裝 git</p><p>如果你還是想確認可以執行以下指令，有回傳版本號表示你已經安裝好 git 了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure><p>還未完成安裝的話可以到參考<a href="https://amy6072698.github.io/amy10blog/2025/04/22/20250422-hexo-learning2/">這系列文章的第二篇</a>，先完成安裝</p><hr><h3 id="註冊你的-GitHub"><a href="#註冊你的-GitHub" class="headerlink" title="註冊你的 GitHub"></a>註冊你的 GitHub</h3><p>確定安裝好 git 之後，先前往 <a href="https://github.com/">GitHub 官網</a> 註冊你的 GitHub 帳號</p><p>進入官網點擊右上角的 Sign up 按鈕<br><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694xdZhyBnX72.png" alt=" GitHub 官網註冊按鈕"></p><p>接下來就是註冊帳號會有的流程，讓你填寫一些基本資料、回答一些問題 ( 主要是 GitHub 要調查你申請帳號的用途 )，然後請你選擇方案，如果不需要付費才有的功能選擇免費就好</p><hr><h3 id="讓-VSCode-綁定你的-GitHub-帳號"><a href="#讓-VSCode-綁定你的-GitHub-帳號" class="headerlink" title="讓 VSCode 綁定你的 GitHub 帳號"></a>讓 VSCode 綁定你的 GitHub 帳號</h3><p>如果你跟我一樣使用 VSCode，要記得綁定你的 GitHub 帳號往下介紹前先做個小補充：<a href="https://marketplace.visualstudio.com/items?itemName=MS-CEINTL.vscode-language-pack-zh-hant">讓 VSCode 介面中文化套件</a></p><p>可以在 VSCode 左邊找到以下圖示，然後在側欄搜尋框搜尋 chinese，找到中文化套件點擊它之後右邊會出現這個套件的相關介紹，點擊「安裝」按鈕，然後關掉 VSCode 在重開就可以看見中文化的 VSCode 介面囉 ~</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/201726946kGiHmSY4C.png" alt=" VSCode 延伸模組圖示"></p><p>安裝完套件之後相信大家就能看見中文化的介面了，接下來往下介紹如何讓 VSCode 綁定 GitHub 帳號</p><p>打開 VSCode 點擊左下的人像 icon，再選擇「啟用雲端變更…」( 英文介面應該叫：Turn on Cloud Changes… )<br><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694Be3GJcerGO.png" alt="點擊左下人像 icon，選啟用雲端變更"></p><p>然後最上方搜尋框會跳出兩個項目，選擇「利用 GitHub 登入」<br><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694aif6smUhN5.png" alt="上方搜尋框選擇利用 GitHub 登入"></p><p>再來就會跳出一個 GitHub 的視窗，要你確認綁定的帳號，確定好後點擊「Continue」<br><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694sgoa8Daeq5.png" alt="確認綁定帳號點擊 Continue"></p><p>然後就會出現請你授權給 VSCode 的視窗，點擊「Authorize Visual-Studio-Code」<br><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694yIptVAl5vi.png" alt="授權給 VSCode 的視窗"></p><p>最後會出現確認視窗，點擊「開啟 Visual Studio Code」<br><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694CHx2ik1Qc2.png" alt="開啟 Visual Studio Code 的確認視窗"></p><p>打開 VSCode 點擊左下的人像 icon，就可以看見圖中白色長方處會出現你的 GitHub 帳號，如果中間遇到錯誤可以關閉 VSCode 再重啟<br><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694y2mlNpeqAZ.png" alt="點擊左下人像 icon，可以看見你的 GitHub 帳號"></p><p>如果以上步驟都順利完成就恭喜你完成綁定囉🎉</p><h2 id="新增-GitHub-空間"><a href="#新增-GitHub-空間" class="headerlink" title="新增 GitHub 空間"></a>新增 GitHub 空間</h2><p>完成前置的一番奮鬥，接下來就可以用你的 GitHub 帳號新增 GitHub 空間，也就是 GitHub 儲存庫 ( GitHub repository，以下簡稱 GitHub repo )，把你的 Hexo 部落格推上去囉 ~</p><p>登入你的 GitHub 帳號後會出現你的 Dashboard，點擊右上方你的頭像會跳出以下選單，選擇「Your repositories」<br><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694odgHCcrUM1.png" alt=" Your repositories 選項位置"></p><p>進入 Your repositories，這裡會有所有你創建的 GitHub repo，點擊右上方的「New」按鈕<br><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694ezQkyiE83a.png" alt=" New 按鈕位置"></p><p>然後就可以在 Repository name 填入你的 GitHub repo 名稱<br><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694D1kDzrkuK7.png" alt=" Repository name 位置"></p><p>完成後就點擊下方的「Create repository」按鈕，就可以進入你剛剛建立的 GitHub repo 頁面了，左上 GitHub Logo 旁邊的白色長方處會顯示你的 GitHub 帳號，在往右就是你剛剛命名的 GitHub repo 名稱<br><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694G2e3kizOOb.png" alt=" GitHub repo 頁面"></p><p>學會如何新增 GitHub repo 之後，我們就繼續往下前進</p><h2 id="部署你的部落格到-GitHub-Page"><a href="#部署你的部落格到-GitHub-Page" class="headerlink" title="部署你的部落格到 GitHub Page"></a>部署你的部落格到 GitHub Page</h2><p>首先，先到 Hexo 的官方文件，上面有寫到關於「在 GitHub Pages 上部署 Hexo」的內容，讓我們看到<a href="https://hexo.io/zh-tw/docs/github-pages#One-command-deployment">「一鍵部署」( One-command deployment )</a>這一節的內容</p><p>接下來就依照說明一步步完成部署吧 ~</p><p>首先進入 <a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a>，往下滑查看 README 的說明，可以看到 Installation 提供了以下安裝指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>複製安裝指令貼到終端機 ( 記得確認是否在 Hexo 部落格資料夾的路徑上 )，然後執行<br><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694Ks8PnDTsDP.png" alt="執行安裝 hexo-deployer-git 的指令"></p><p>安裝好之後，要在「全站的 config 檔」中加入以下內容</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/&lt;username&gt;/&lt;project&gt;</span></span><br><span class="line">  <span class="comment"># example, https://github.com/hexojs/hexojs.github.io</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">gh-pages</span></span><br></pre></td></tr></table></figure><p>點開全站的 config 檔後，找到 <code>deploy</code> 的區塊替換成以上內容，這時候眼尖的你一定會發現 repo 這一項似乎有些內容要修改</p><p>沒錯，網址中的 <code>&lt;username&gt;</code> 要改成你的 GitHub 帳號，<code>&lt;project&gt;</code> 則要改成你的 GitHub repo 名稱，假設我的帳號是「amy12345」、repo 名稱是「amy_hexo」，那 repo 這項就要改成：<code>https://github.com/amy12345/amy_hexo</code></p><p>其中 branch 這項，代表之後部署 Hexo 部落格到 GitHub Pages 時，會部署到哪個分支名稱，這邊可以直接用預設名稱 gh-pages<br><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694g6tmS3msZC.png" alt="新增 deploy 內容到全站 config 檔"></p><p>接下來是不是要下指令部署啦？</p><p>先等等！全站的 config 檔還有東西要改，我們找到 <code>url</code> 然後會看見檔案中的註解有提示，如果你是用 GitHub Pages 要把 <code>url</code> 這項改成：<code>https://username.github.io/project</code>，經過前一個步驟，聰明的你一定已經知道要怎麼改了吧 ~</p><p>用我前面的範例套用，我的 <code>url</code> 這項就要改成：<code>https://amy12345.github.io/amy_hexo</code></p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/201726945eqhPSD2zX.png" alt="修改 url 網址"></p><p>好的，接下來就是期待已久的下指令啦 ~ 執行以下指令部署你的 Hexo 網站到 GitHub Pages ( 如果之後要更新網站內容一樣要用以下指令部署 )</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo deploy</span><br></pre></td></tr></table></figure><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/201726945MZuwAZHdr.png" alt="執行 hexo clean &amp;&amp; hexo deploy 指令"></p><ul><li><strong>補充</strong>：<code>hexo clean</code> 跟 <code>hexo deploy</code> 是兩個不同指令，<code>hexo clean</code> 會清除原先有的 public 資料夾，確保後續部署的是最新的網站內容，而 <code>hexo deploy</code> 執行後會產生 public 資料夾，裡面是編譯後的網站內容，且還會把編譯內容部署到 GitHub Pages<br><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694hUBnwMb0tH.png" alt="hexo deploy 指令"></li></ul><p>執行完成後回到你的 GitHub repo 頁面，重新整理就會看見出現了剛剛部署的 gh-pages 分支</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694eywtSg9EJh.png" alt=" GitHub repo 頁面更新"></p><p>然後點擊上方的「Settings」</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/201726949LOHOiU9MD.png" alt="點擊 Settings "></p><p>選擇左側欄的「Pages」，就會在黃框處看見你部署到 GitHub Pages 的部落格網址，如果沒出現網址就稍等一下再重整網頁<br><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694fv24Mpv2xe.png" alt=" GitHub Pages 網址位置"></p><p>點進網址後，就可以看見你的部落格囉 ~</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694vAPPC9dejM.png" alt="部署部落格完成的樣子"></p><ul><li><strong>小提醒</strong>：點進網址後如果還沒出現預期的網站樣式，就等一下再重整網頁或用無痕模式開看看，等很久還是沒反應，就需要檢查前面提到的全站 config 檔設定，是否有錯誤或缺漏，有的話修改儲存後再重新下指令部署</li></ul><h2 id="常見-Hexo-指令"><a href="#常見-Hexo-指令" class="headerlink" title="常見 Hexo 指令"></a>常見 Hexo 指令</h2><p>看到這篇文章恭喜你👏已經將 Hexo 指令學得差不多了，接下來就列出一些比較常見的 Hexo 指令做個小統整吧 ~</p><ul><li><code>hexo init 你的網站英文名稱</code>：初始化 Hexo 部落格環境的指令，init 後面接自訂的網站英文名稱，執行後會在專案資料夾中，新增 Hexo 部落格網站的資料夾，該資料夾名稱與自訂的網站英文名稱相同</li><li><code>hexo server</code> 或 <code>hexo s</code>：開啟 Hexo 伺服器，執行後可以在本地端查看 Hexo 網站的樣子</li><li><code>hexo new &#39;你的文章名稱&#39;</code>：新增 Hexo 部落格文章，new 後面接自訂的文章名稱，記得名稱要用單引號包住，執行後會在 <code>source</code> 內的 <code>_posts</code> 資料夾中新增一個文章的 md 檔</li><li><code>hexo new page 頁面英文名稱</code>：新增 Hexo 網站的頁面，page 後面接頁面英文名稱，執行後會在 <code>source</code> 內新增該頁面名稱的資料夾，裡面有 <code>index.md</code> 檔，頁面相關設定可見本系列文章第五篇</li><li><code>hexo clean</code>：執行後會清除 public 資料夾</li><li><code>hexo deploy</code>：執行後會產生 public 資料夾，並把裡面編譯後的網站內容部署到 GitHub Pages</li><li><code>hexo generate</code> 或 <code>hexo g</code>：執行後會產生 public 資料夾，裡面是編譯後的網站內容，和 <code>hexo deploy</code> 不同，不會把網站內容部署到 GitHub Pages</li></ul><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>看完這篇文章相信大家都能夠了解，如何將自己的 Hexo 部落格網站部署到 GitHub Pages 了，其實說到 GitHub 通常會講到 git 指令，但是這個系列主要還是介紹 Hexo，怕模糊焦點所以就先不談 git 的相關知識 <del>(留給未來的我寫</del></p><p>作為補償我幫大家整理了 Hexo 的常見指令，請笑納🫡，不過如果想多了解 git 的內容可以參考以下的一些學習資源：</p><ul><li><a href="https://w3c.hexschool.com/git/cfdbd310">Git &amp; GitHub 教學手冊</a></li><li><a href="https://gitbook.tw/">為你自己學 Git</a></li></ul><p>那我們就下篇文章見囉 ~</p>]]></content>
    
    
    <summary type="html">介紹如何將自己的 Hexo 部落格網站部署到 GitHub Pages</summary>
    
    
    
    <category term="Hexo" scheme="http://amy6072698.github.io/amy10blog/categories/Hexo/"/>
    
    
    <category term="Hexo" scheme="http://amy6072698.github.io/amy10blog/tags/Hexo/"/>
    
    <category term="前端" scheme="http://amy6072698.github.io/amy10blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>從零開始學 Hexo (6) | 認識 Hexo 目錄與調整全站網站設定</title>
    <link href="http://amy6072698.github.io/amy10blog/2025/04/26/20250426-hexo-learning6/"/>
    <id>http://amy6072698.github.io/amy10blog/2025/04/26/20250426-hexo-learning6/</id>
    <published>2025-04-26T11:32:58.000Z</published>
    <updated>2025-05-19T13:13:26.158Z</updated>
    
    <content type="html"><![CDATA[<h2 id="認識-Hexo-目錄結構"><a href="#認識-Hexo-目錄結構" class="headerlink" title="認識 Hexo 目錄結構"></a>認識 Hexo 目錄結構</h2><p>在開始講解如何部署你的部落格網站之前，我們先簡單認識一下 Hexo 資料夾內的目錄結構吧！什麼？你說為什麼？看下去就知道啦 ~</p><p>還記得一開始下 Hexo 指令的時候嗎？對的，就是你下了一個像 <code>hexo init 你的網站英文名稱</code> 這樣的指令，然後 Hexo 就咻的把一個 Hexo 部落格資料夾丟進你的專案資料夾裡了</p><p>前面一直都沒有細談 Hexo 給的這個部落格資料夾裡面到底有什麼，接下來就簡單說明裡面的內容</p><p>以我的部落格資料夾為例，裡面有這麼多資料夾及檔案，接下來就簡單講解幾個資料夾及檔案的作用吧 ~<br><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694MGmxffqIXw.png" alt="部落格資料夾"></p><h3 id="node-modules"><a href="#node-modules" class="headerlink" title="node_modules"></a>node_modules</h3><p>裡面會存放很多很多 <del>( 多到無法想像 )</del> 專案 ( 你的部落格網站 ) 所需的所有套件資料，所以它通常不會被加入 git 的版本控制，就不會被 push 傳到遠端的 GitHub 儲存庫</p><p>假設這個專案需要和別人協作開發，對方把資料 <code>git clone</code> 下來 (從遠端 GitHub 儲存庫抓下來)，而抓下來的資料當然不會有 node_modules ，不過只要執行 <code>npm intsall</code> 指令，就會自動產生 node_modules 這個資料夾了</p><p><del>所以就不需要把藍鯨 ( node_modules ) 冰到小冰箱裡了，可以多冰幾顆布丁</del></p><p>如果你對 git 還不了解，可先忽略不懂的部分，只要知道 node_modules 是用來放你的部落格網站所有所需套件的資料夾就好</p><h3 id="scaffolds"><a href="#scaffolds" class="headerlink" title="scaffolds"></a>scaffolds</h3><p>這個資料夾裡有下 Hexo 指令生成草稿、頁面及文章的預設模板檔案，分別是 <code>draft.md</code>、<code>page.md</code>、<code>post.md</code></p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694SDjvVvjwsi.png" alt=" scaffolds 資料夾裡的檔案"></p><p>還記得前篇提到的，文章開頭可以寫入 tags 嗎？</p><p>假設我希望每次下 <code>hexo new &#39;文章名稱&#39;</code> 指令產生的文章檔，都要在文章開頭加 description 項目，就要改 <code>post.md</code> 這個檔案，像這樣：</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694YOv5aamCpL.png" alt=" post.md 檔新增 description"></p><p>這樣下次執行 <code>hexo new &#39;文章名稱&#39;</code> 指令，文章開頭就會多出 description 囉 ~</p><p>順便補充生成草稿的 Hexo 指令：<code>hexo new draft</code> ( 雖然我比較少用 )</p><h3 id="source"><a href="#source" class="headerlink" title="source"></a>source</h3><p>再來我們目前最熟悉的 source 資料夾 ~ 前面講到你的部落格文章、頁面檔案都會放在這個資料夾</p><h3 id="themes"><a href="#themes" class="headerlink" title="themes"></a>themes</h3><p>這個資料夾會用來放安裝下來的 Hexo 樣板主題資料，看到資料夾名稱有 <code>s</code> 對嗎？沒錯，是複數這表示它可以放不只一種主題，至於 Hexo 如何更換主題之後會再講解 <del>( 保留點神祕感 )</del></p><h3 id="config-yml-全站"><a href="#config-yml-全站" class="headerlink" title="_config.yml (全站)"></a>_config.yml (全站)</h3><p>奇怪這個檔名？好眼熟！眼熟就表示你前篇有認真看👏</p><p>沒錯，前篇有提到 themes 的 landscape 資料夾內也有一個 <code>_config.yml</code> 檔，但是和這裡的 <code>_config.yml</code> 檔當然是不同的，這就是為什麼要先認識 Hexo 目錄的原因</p><p>這裡的 <code>_config.yml</code> 檔網站全站的設定檔，不是主題的設定檔，也就是當你需要調整一些全站設定時，就會來這裡修改這個全站的 config 檔</p><p>為了避免誤會先定義好兩者的名稱，接下來 themes 的 <code>_config.yml</code> 檔，我會叫「主題的 config 檔」，這個全站的 <code>_config.yml</code> 檔，就叫「全站的 config 檔」</p><h3 id="gitignore"><a href="#gitignore" class="headerlink" title=".gitignore"></a>.gitignore</h3><p>顧名思義，這個檔案是用來列出要被 git 忽略的檔案，裡面列出的檔案不會被 git 加入版本控制 <del>讓檔案變成小透明的地方</del>，聰明的你應該有發現 node_modules 也在裡面</p><h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><p>這個檔案用來記錄專案使用的套件版本資訊、可以下哪些指令等專案的基本資訊，前面有提到可以透過 <code>npm install</code> 重新安裝專案所需的所有套件，至於要下載哪些、和哪個版本的套件就是這個檔案存在的意義了</p><h2 id="調整網站全站設定"><a href="#調整網站全站設定" class="headerlink" title="調整網站全站設定"></a>調整網站全站設定</h2><p>前面講一堆，終於到動手做的時候啦 ~</p><p>如果你觀察現在的首頁，會發現有一點就是很想給他改掉啦！沒錯，就是那大大 Hexo 單字，那是什麼？跟我部落格完全不搭 <del>( Hexo 別生氣，沒有針對你的意思 )</del></p><p>好，說改就改！想修改它就要修改「全站的 config 檔」( 是全站不是主題喔 )，打開檔案後找到 <code># Site</code> 就可以設定專屬於你的網站資訊囉 ~<br><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694kU4mbGaCqz.png" alt="全站的 config 檔 Site 設定"></p><p>內容可以自己慢慢想，我自己光部落格網站的名稱就想了很久，如果想了解更多全站設定的內容可以參考 <a href="https://hexo.io/zh-tw/docs/configuration">Hexo 官網文件的配置部分</a></p><p>設定好儲存開啟伺服器之後，首頁的 Hexo 就改為 Amy 的小天地啦🎉<br><img src="https://ithelp.ithome.com.tw/upload/images/20250519/201726944w8bfhr7ya.png" alt="修改後首頁畫面"></p><p>那你一定會疑惑其他項目改了哪裡？請對網頁按下滑鼠右鍵選「檢視網站原始碼」，看看程式碼前面幾行是不是出現剛剛設定的內容了？<br><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694wPo7ljTSyX.png" alt="檢視網站原始碼畫面"></p><p>這樣就能客製化你的網站資訊了，記得一定要填 title 和 description，這樣可以幫助你的網站更容易被搜尋到喔 ~</p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>這篇文章介紹了 Hexo 部落格資料夾裡面，到底有哪些神秘資料，這邊主要講解一些比較簡單的介紹，因為不知道大家 git 程度，不知道怎麼寫新手也能理解，有點小困擾但是還是寫完了，最後還講了如何客製化自己的部落格全站網站設定</p><p>大家可以試著開始想自己的部落格名稱囉 ~ 也可以想到再來重溫這篇文章，那我們就下篇文章見囉 ~</p>]]></content>
    
    
    <summary type="html">介紹 Hexo 部落格資料夾裡有哪些資料，以及如何調整網站的相關資訊內容</summary>
    
    
    
    <category term="Hexo" scheme="http://amy6072698.github.io/amy10blog/categories/Hexo/"/>
    
    
    <category term="Hexo" scheme="http://amy6072698.github.io/amy10blog/tags/Hexo/"/>
    
    <category term="前端" scheme="http://amy6072698.github.io/amy10blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>從零開始學 Hexo (5) | Hexo 文章細節調整與如何新增頁面</title>
    <link href="http://amy6072698.github.io/amy10blog/2025/04/25/20250425-hexo-learning5/"/>
    <id>http://amy6072698.github.io/amy10blog/2025/04/25/20250425-hexo-learning5/</id>
    <published>2025-04-25T09:25:32.000Z</published>
    <updated>2025-05-19T13:00:48.143Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hexo-文章細節調整"><a href="#Hexo-文章細節調整" class="headerlink" title="Hexo 文章細節調整"></a>Hexo 文章細節調整</h2><p>前面有介紹如何新增文章的 Hexo 指令及 Mackdown 語法，其中還有一些細節想和大家說明，Hexo 的文章除了可以 Mackdown 語法編輯文字外，還有一個部份在每個文章檔案的開頭：</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694c1DAp1d443.png" alt=" Hexo 文章寫入相關資訊的部分"></p><p>沒錯，就是這塊區域，它可以寫入這篇文章的 title、tags 等與文章相關的資訊，接下來就看看這些資訊如何寫入，以及在部落格頁面上會如何呈現囉 ~</p><h3 id="title"><a href="#title" class="headerlink" title="title"></a>title</h3><p>顧名思義就是你文章的主要標題，現在修改後儲存，再開啟 Hexo 伺服器</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/201726941dJ7wiesl8.png" alt="修改 title 程式碼"></p><p>修改後右側的 Recent Posts 區塊，會呈現你修改後的 title 名稱</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/201726949yJ0iZRZOq.png" alt="首頁的 Recent Posts 區塊"></p><p>進入這篇文章的頁面，你會看到修改後的 title 名稱就是這篇文章最上方的大標題</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694yfP97tJigv.png" alt="文章最上方大標題"></p><h3 id="tags"><a href="#tags" class="headerlink" title="tags"></a>tags</h3><p>標籤，它是你文章的關聯標籤，假如你的文章內容跟前端技術、Hexo 有關，你就可以在 tags 加上前端和 Hexo 兩個標籤，寫法如下：</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694AXTrusbfL0.png" alt=" tags 寫法"></p><p>儲存後重整網頁，文章的最下方就會出現剛剛修改的 tags 內容</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694W7DP0SivQF.png" alt="文章最下方出現修改的 tags 內容"></p><p>然後你會發現右側出現兩個區塊：Tags 和 Tag Cloud，裡面有剛剛新增的標籤內容</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694YOIhd2CJ5J.png" alt=" Tags 和 Tag Cloud 區塊"></p><p>等等！怎麼有兩個跟 tags 有關的區塊？別急，我來解釋，Tag Cloud 這個區塊內的標籤字體會隨相關文章變多而變大</p><p>實際示範，如果我又新增了一篇文章，這次 tags 的內容我輸入： <code>Hexo</code> 和 <code>待辦</code>，這時候跟 Hexo 標籤相關的文章就有兩篇，比 前端 和 待辦 兩個標籤的文章還多，再看看 Tag Cloud ：</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694hh4QO9AHRD.png" alt=" Tag Cloud 區塊的標籤會隨文章變多而變大"></p><p>Tag Cloud 區塊的 Hexo 標籤字體變大了，而反觀 Tags 區塊只有條列新增一個 待辦 標籤：<br><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694d7UlmWMko4.png" alt=" Tags 區塊"></p><p>你以為只有這樣嗎？oh, no no no ！點擊這兩個區塊內任一標籤連結，可以到與該標籤相關的所有文章清單頁面，點擊 Hexo 標籤就會看到有兩篇相關文章：<br><img src="https://ithelp.ithome.com.tw/upload/images/20250519/201726946y61ArwM9O.png" alt="點擊 Hexo 標籤有兩篇相關文章"></p><h3 id="如何縮短-Hexo-首頁文章長度"><a href="#如何縮短-Hexo-首頁文章長度" class="headerlink" title="如何縮短 Hexo 首頁文章長度"></a>如何縮短 Hexo 首頁文章長度</h3><p>這個是額外的小補充，也稍微跟文章有關係就放進來講，經過一系列調整你應該有發現首頁左側會顯示你寫的所有文章，很貼心…但是顯示太多了！</p><p>別擔心，你只需要在文章中想截斷的地方，加入 <code>&lt;!--more--&gt;</code> 這行程式碼<br><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694BpC6txGrld.png" alt="在文章想截斷的地方加入程式碼"></p><p>噹噹 ~ 神奇的 Read More 按鈕就會出現在首頁左側的文章區塊中，而且只會顯示 <code>&lt;!--more--&gt;</code> 之前的內文<br><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694i9jxhhvCBh.png" alt=" Read More 按鈕出現在首頁文章區塊"></p><p>這樣首頁就簡潔許多囉 ~</p><h2 id="如何新增-Hexo-頁面"><a href="#如何新增-Hexo-頁面" class="headerlink" title="如何新增 Hexo 頁面"></a>如何新增 Hexo 頁面</h2><p>學到這邊你也許會想我知道怎麼新增文章，但是我想做的不只是寫文章，我想向大家介紹自己或介紹部落格，但是沒有關於頁面可以給我放這些內容怎麼辦？</p><p>別擔心 ~ Hexo 也想到了，你可以用簡單的 Hexo 指令新增頁面，接下來就來看看如何新增並調整頁面吧 ~</p><p>一樣開啟終端機，確認是否在 Hexo 部落格資料夾的路徑上，再執行以下指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page about</span><br></pre></td></tr></table></figure><p>執行完之後，你就會看到 source 資料夾中多了一個 about 資料夾</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694p1JzqaPDj5.png" alt=" about 資料夾位置"></p><p>資料夾中有一個 index.md 的檔案，你可以在裡面輸入關於頁面的內容，完成後開啟伺服器你會發現首頁上方沒有地方進去 QAQ ，別急 ~ 這部分之後會說，先在網只後面輸入 <code>/about</code> ，就會看到你新增的 about 頁面囉 ~</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694l9YpIiiidx.png" alt=" about 頁面"></p><h2 id="如何在網站上方導覽列新增頁面連結"><a href="#如何在網站上方導覽列新增頁面連結" class="headerlink" title="如何在網站上方導覽列新增頁面連結"></a>如何在網站上方導覽列新增頁面連結</h2><p>確定可以看見你更新的 about 頁面內容後，接下來就來新增導覽列的項目啦 ~ 畢竟現在的項目數量已經滿足不了我們了</p><p>但在新增之前我們要先處理一件事，那就是把現在 Hexo 預設的樣板主題：landscape 安裝好，關於 Hexo 主題的挑選方式在後面會再做介紹</p><p>先進到 <a href="https://github.com/hexojs/hexo-theme-landscape">landscape 的 GitHub 頁面</a>，往下滑會看到 install 的說明內容，目前 Hexo 5.0 和以後的版本可以用 npm 方式安裝，但這邊先用 git 的安裝方式示範安裝，執行以下 git 指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone --depth 1 https://github.com/hexojs/hexo-theme-landscape themes/landscape</span><br></pre></td></tr></table></figure><p>執行後會看到 themes 資料夾多出一個 landscape 的資料夾，然後你會在裡面看見一個 <code>_config.yml</code> 的檔案，這個檔案裡會有關於樣板主題的各種設定</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694wlwiyswC10.png" alt=" themes 中 landscape 的 config 檔"></p><p>點開那個 config 檔找到 menu ，你會發現它下面的項目很眼熟，沒錯，它就是你要修改的目標，在 menu 下再新增一行 <code>About： /about</code><br><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694YPU9BM5Ndy.png" alt="在 menu 下新增 about "></p><p>修改後儲存再開啟 Hexo 伺服器，你就會看見上方導覽列多出了一個 About，點進去就可以看見你的 about 頁面囉 ~</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694uKpZlJqqxR.png" alt="上方導覽列出現 About 項目"></p><h3 id="怎麼把導覽列項目名稱改成中文"><a href="#怎麼把導覽列項目名稱改成中文" class="headerlink" title="怎麼把導覽列項目名稱改成中文"></a>怎麼把導覽列項目名稱改成中文</h3><p>相信聰明的你，在修改過程中已經發現了，<code>About： /about</code> 中前面的 About 就是導覽列項目的名稱，所以只要將 <code>About： /about</code> 改成 <code>關於： /about</code> ，導覽列 About 項目名稱就會被改成「關於」囉 ~</p><p>當然也可以把所有導覽列項目都改成中文，改法跟 About 一樣，修改完就會像這樣：<br><img src="https://ithelp.ithome.com.tw/upload/images/20250519/20172694vMBke8D5sO.png" alt="修改後中文導覽列項目名稱"></p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>今天的介紹就到這邊，大家可以試著新增頁面，嘗試修改文章細節，希望這篇文章能幫助到在學習 Hexo 的你，那我們下篇文章見 ~</p>]]></content>
    
    
    <summary type="html">介紹如何調整 Hexo 文章細節，如何用指令新增部落格頁面</summary>
    
    
    
    <category term="Hexo" scheme="http://amy6072698.github.io/amy10blog/categories/Hexo/"/>
    
    
    <category term="Hexo" scheme="http://amy6072698.github.io/amy10blog/tags/Hexo/"/>
    
    <category term="前端" scheme="http://amy6072698.github.io/amy10blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>從零開始學 Hexo (4) | 新增 Hexo 文章與常用 Markdown 語法</title>
    <link href="http://amy6072698.github.io/amy10blog/2025/04/24/20250424-hexo-learning4/"/>
    <id>http://amy6072698.github.io/amy10blog/2025/04/24/20250424-hexo-learning4/</id>
    <published>2025-04-24T10:20:08.000Z</published>
    <updated>2025-05-19T12:46:10.670Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前置說明"><a href="#前置說明" class="headerlink" title="前置說明"></a>前置說明</h2><p>自己是習慣使用 VSCode 來編輯程式碼，所以之後的程式碼都會以 VSCode 畫面做示範，如果你也想使用 VSCode ，可以到 <a href="https://code.visualstudio.com/">VSCode 官網</a> 進行下載安裝，安裝細節大家可以參考 <a href="https://medium.com/@sajhon_chen4/vs-code%E5%AE%89%E8%A3%9D%E6%95%99%E5%AD%B8-3ccb1570e5cf">社長(Sajhon)這篇文章</a> 的教學</p><h2 id="如何建立你的-Hexo-部落格文章"><a href="#如何建立你的-Hexo-部落格文章" class="headerlink" title="如何建立你的 Hexo 部落格文章"></a>如何建立你的 Hexo 部落格文章</h2><p>經過前篇介紹執行 <code>hexo server</code> 指令可以開啟 Hexo 伺服器，在本地看到目前部落格的樣子後，你一定迫不及待想要開始寫自己的文章了，接下來就來介紹新增文章的 Hexo 指令吧 ~</p><p>先用 VSCode 開啟你的 Hexo 部落格資料夾 ( Hexo 幫你建的那個資料夾) ，以我在前篇的示範為例就是 <code>amy10blog</code> 資料夾</p><p>再來在視窗上方檢視旁邊有三個點按下去，選終端機 &gt; 新增終端機，就可以在 VSCode 中開啟終端機了，此時終端機會直接在目前開啟資料夾的路徑上，也就是你的 Hexo 部落格資料夾路徑上</p><p>確定終端機在你的 Hexo 部落格資料夾路徑上後，再執行以下指令，<code>你的文章名稱</code> 可以自己取名 (注意：名稱要用單引號 <code>&#39;&#39;</code> 包住)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">&#x27;你的文章名稱&#x27;</span></span><br></pre></td></tr></table></figure><p>下完指令後，在 <code>source</code> 資料夾裡面的 <code>_post</code> 資料夾中，Hexo 會新增一個 <code>.md</code> 檔，以 <code>你的文章名稱</code> 命名，假設文章名稱叫 <code>hexo_learning1</code> 執行結果如下：</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250430/20172694hiHkpsRy4v.png" alt="hexo new &#39;hexo_learning1&#39; 執行結果"></p><p>小補充： VSCode 開啟終端機快捷鍵是 ctrl + shift + 反引號鍵 (就是 tab 上面有小蚯蚓 <code>~</code> 的那個鍵)</p><hr><h2 id="怎麼用-Markdown-語法撰寫文章？"><a href="#怎麼用-Markdown-語法撰寫文章？" class="headerlink" title="怎麼用 Markdown 語法撰寫文章？"></a>怎麼用 Markdown 語法撰寫文章？</h2><p>如果你有仔細研究 <a href="https://hexo.io/zh-tw/docs/">Hexo 官網的文件</a>，你應該會發現在文件第一頁，官方就有解釋：</p><blockquote><p>Hexo 是一個快速、簡單且強大的網誌框架。  <strong>Hexo 使用 Markdown（或其他標記語言）解析您的文章</strong> ，並在幾秒鐘內，透過漂亮的主題產生靜態檔案。</p></blockquote><p>沒錯，建立完文章後你還需要學習一些 Markdown 語法，才能寫出有不同文字樣式效果的文章，接下來就介紹一些我自己比較常使用的 Markdown 語法給大家參考囉 ~</p><hr><h3 id="標題"><a href="#標題" class="headerlink" title="標題"></a>標題</h3><p>在文字開頭加上井字號 <code>#</code> ，以下是程式碼示範，標題 1 ~ 6 對應 HTML 檔案中的  <code>&lt;h1&gt;</code> ~ <code>&lt;h6&gt;</code> 標籤樣式</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 標題1</span></span><br><span class="line"><span class="section">## 標題2</span></span><br><span class="line"><span class="section">### 標題3</span></span><br><span class="line"><span class="section">#### 標題4</span></span><br><span class="line"><span class="section">##### 標題5</span></span><br><span class="line"><span class="section">###### 標題6</span></span><br></pre></td></tr></table></figure><p>示範：</p><h1 id="標題1"><a href="#標題1" class="headerlink" title="標題1"></a>標題1</h1><h2 id="標題2"><a href="#標題2" class="headerlink" title="標題2"></a>標題2</h2><h3 id="標題3"><a href="#標題3" class="headerlink" title="標題3"></a>標題3</h3><h4 id="標題4"><a href="#標題4" class="headerlink" title="標題4"></a>標題4</h4><h5 id="標題5"><a href="#標題5" class="headerlink" title="標題5"></a>標題5</h5><h6 id="標題6"><a href="#標題6" class="headerlink" title="標題6"></a>標題6</h6><h3 id="粗體"><a href="#粗體" class="headerlink" title="粗體"></a>粗體</h3><p>將文字用 2 個星號 <code>**</code> 包住，對應 <code>&lt;strong&gt;</code> 標籤樣式</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我是 <span class="strong">**粗體**</span> 文字</span><br></pre></td></tr></table></figure><p>示範：<br>我是 <strong>粗體</strong> 文字</p><h3 id="斜體"><a href="#斜體" class="headerlink" title="斜體"></a>斜體</h3><p>將文字用 1 個星號 <code>*</code> 包住，對應 <code>&lt;em&gt;</code> 標籤樣式</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我是 <span class="emphasis">*斜體*</span> 文字</span><br></pre></td></tr></table></figure><p>示範：<br>我是 <em>斜體</em> 文字</p><h3 id="刪除線"><a href="#刪除線" class="headerlink" title="刪除線"></a>刪除線</h3><p>將文字用 2 個小蚯蚓 <code>~~</code> 包住，對應 <code>&lt;s&gt;</code> 標籤樣式</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我是 ~~刪除線~~ 嘿嘿</span><br></pre></td></tr></table></figure><p>示範：<br>我是 <del>刪除線</del> 嘿嘿</p><h3 id="分隔線"><a href="#分隔線" class="headerlink" title="分隔線"></a>分隔線</h3><p>在行與行之間加上 3 個減號 <code>---</code> 或星號 <code>***</code>，對應 <code>&lt;hr&gt;</code> 標籤樣式，建議以減號代替米字號，閱讀上較為方便</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">我在減號分隔線之上哈哈哈</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">我在減號分隔線之下嗚嗚嗚</span><br><span class="line"></span><br><span class="line">我在星號分隔線之上哈哈哈</span><br><span class="line"></span><br><span class="line"><span class="strong">*** </span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">我在星號分隔線之下嗚嗚嗚</span></span><br></pre></td></tr></table></figure><p>示範：<br>我在減號分隔線之上哈哈哈</p><hr><p>我在減號分隔線之下嗚嗚嗚</p><p>我在星號分隔線之上哈哈哈</p><hr><p>我在星號分隔線之下嗚嗚嗚</p><h3 id="插入連結"><a href="#插入連結" class="headerlink" title="插入連結"></a>插入連結</h3><p>一種由中括號 <code>[]</code> 和小括號 <code>()</code> 組成，中括號內寫入連結文字的內容、小括號內寫入連結網址；另一種是直接用大於小於符號 <code>&lt;&gt;</code> 包住連結網址，兩種方式都對應 <code>&lt;a&gt;</code> 標籤樣式</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">點我前往異空間</span>](<span class="link">https://amy6072698.github.io/amy10blog/123</span>)</span><br><span class="line"><span class="language-xml">&lt;https://www.google.com/&gt;</span></span><br></pre></td></tr></table></figure><p>示範：<br><a href="https://amy6072698.github.io/amy10blog/123">點我前往異空間</a><br><a href="https://www.google.com/">https://www.google.com/</a></p><h3 id="插入圖片"><a href="#插入圖片" class="headerlink" title="插入圖片"></a>插入圖片</h3><p>和連結寫法大致相同，但需要在中括號 <code>[]</code> 前面加入一個驚嘆號 <code>!</code> ，中括號內寫入圖片說明文字，小括號內寫入圖片連結，對應 <code>&lt;img&gt;</code> 標籤</p><p><a href="https://unsplash.com/ja/%E5%86%99%E7%9C%9F/%E8%8C%B6%E8%89%B2%E3%81%AE%E6%9C%A8%E8%A3%BD%E3%81%AE%E5%BA%8A%E3%81%AB%E6%A8%AA%E3%81%9F%E3%82%8F%E3%82%8B%E7%99%BD%E3%81%A8%E8%8C%B6%E8%89%B2%E3%81%AE%E7%8C%AB-46TvM-BVrRI">以下圖片來源</a></p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">賣萌的貓咪圖</span>](<span class="link">https://images.unsplash.com/photo-1589883661923-6476cb0ae9f2?q=80&amp;w=200&amp;auto=format&amp;fit=crop&amp;ixlib=rb-4.0.3&amp;ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D</span>)</span><br></pre></td></tr></table></figure><p>示範：</p><p><img src="https://images.unsplash.com/photo-1589883661923-6476cb0ae9f2?q=80&w=200&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA==" alt="賣萌的貓咪圖"></p><h3 id="清單"><a href="#清單" class="headerlink" title="清單"></a>清單</h3><p>清單分為有序清單與無序清單，兩種寫法不同</p><p> <strong>有序清單</strong> ：寫法是阿拉伯數字加點 <code>.</code> 加空白之後，再接項目文字，對應 <code>&lt;ol&gt;</code> &gt; <code>&lt;li&gt;</code> 標籤樣式</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 項目一</span><br><span class="line"><span class="bullet">2.</span> 項目二</span><br></pre></td></tr></table></figure><p>示範：</p><ol><li>項目一</li><li>項目二</li></ol><p> <strong>無序清單</strong> ：寫法有三種，用星號 <code>*</code> 或加號 <code>+</code> 或減號 <code>-</code> 其中一種符號，加空白之後再接項目文字，對應 <code>&lt;ul&gt;</code> &gt; <code>&lt;li&gt;</code> 標籤樣式，雖然三種符號都可以，但建議同篇文章的無序清單，統一用一種符號撰寫方便閱讀</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> 星號項目一</span><br><span class="line"><span class="bullet">*</span> 星號項目二</span><br><span class="line"><span class="bullet">+</span> 加號項目一</span><br><span class="line"><span class="bullet">+</span> 加號項目二</span><br><span class="line"><span class="bullet">-</span> 減號項目一</span><br><span class="line"><span class="bullet">-</span> 減號項目二</span><br></pre></td></tr></table></figure><p>示範：</p><ul><li>星號項目一</li><li>星號項目二</li></ul><ul><li>加號項目一</li><li>加號項目二</li></ul><ul><li>減號項目一</li><li>減號項目二</li></ul><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>在引用文字的開頭加上大於符號 <code>&gt;</code> ，就會產生 <code>&lt;blockquote&gt;</code> 標籤的樣式，但不要因為想要這種樣式的文字就貿然使用，因為這個標籤代表引用的意思請謹慎使用</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; 我是從別處引用的文字，你好呀！</span></span><br></pre></td></tr></table></figure><p>示範：</p><blockquote><p>我是從別處引用的文字，你好呀！</p></blockquote><h3 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h3><p>要在文章內加入程式碼，有兩種方式一種是程式碼片段、一種是程式碼區塊</p><p> <strong>程式碼片段</strong> ：將程式碼用 1 個反引號 (跟小蚯蚓 <code>~</code> 同一個鍵) 包住</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">程式碼的左邊 <span class="code">`let a = 1;`</span> 程式碼的右邊</span><br></pre></td></tr></table></figure><p>示範：<br>程式碼的左邊 <code>let a = 1;</code> 程式碼的右邊</p><p> <strong>程式碼區塊</strong> ：在程式碼上一行加上 3 個反引號加程式碼語言縮寫，下一行則只加上 3 個反引號結尾，這樣會在程式碼塊內產生不同程式碼語言的高亮樣式，通常會透過 <a href="https://highlightjs.org/">highlight.js 套件</a>產生高亮樣式</p><p>Markdown 寫法：</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250430/20172694M3caSyIfpC.png" alt="Markdown 程式碼區塊寫法"></p><p>以下以 HTML 、 CSS 、 JS 示範：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是標題<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>： red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><hr><h2 id="試著做做看"><a href="#試著做做看" class="headerlink" title="試著做做看"></a>試著做做看</h2><p>看完以上 Markdown 語法寫法，可以試著在你新增的文章 .md 檔中寫入內容，完成後記得儲存 (這很重要) ，再用 <code>hexo server</code> 開啟 Hexo 伺服器看看你的文章內容是否正確顯示喔 ~</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250430/20172694ZdCE75Xs7R.png" alt=" Markdown 語法程式碼"></p><p>一開始點開連結會在首頁，你剛新增的文章名稱會出現在首頁 Recent Posts 的區塊</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250430/20172694WQTIPu00vm.png" alt=" Hexo 首頁 Recent Posts 的區塊"></p><p>點一下你剛剛新增的文章名稱，就會看到你新增的文章內容囉 ~</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250430/201726949Kg9aBr4r7.png" alt="新增的文章內容"></p><hr><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>其實文章中介紹的 Markdown 語法並非全部，還有很多細節可以了解，如果想了解更多可以參考 <a href="https://israynotarray.com/other/20191111/1875438261/">Ray 的 Markdown 基礎與入門教學手冊</a> ，這篇只有就我自己比較常使用的語法作介紹，希望經過這篇文章大家可以寫出美美的 Hexo 部落格文章，那我們下篇文章見 ~</p>]]></content>
    
    
    <summary type="html">介紹如何用 Hexo 指令新增文章，以及常用的 Markdown 語法</summary>
    
    
    
    <category term="Hexo" scheme="http://amy6072698.github.io/amy10blog/categories/Hexo/"/>
    
    
    <category term="Hexo" scheme="http://amy6072698.github.io/amy10blog/tags/Hexo/"/>
    
    <category term="前端" scheme="http://amy6072698.github.io/amy10blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>從零開始學 Hexo (3) | 下 Hexo 指令建立部落格環境吧 ~</title>
    <link href="http://amy6072698.github.io/amy10blog/2025/04/23/20250423-hexo-learning3/"/>
    <id>http://amy6072698.github.io/amy10blog/2025/04/23/20250423-hexo-learning3/</id>
    <published>2025-04-23T06:26:12.000Z</published>
    <updated>2025-05-19T12:41:37.403Z</updated>
    
    <content type="html"><![CDATA[<h2 id="建立-Hexo-環境的前置"><a href="#建立-Hexo-環境的前置" class="headerlink" title="建立 Hexo 環境的前置"></a>建立 Hexo 環境的前置</h2><p>經過前篇 <del>激烈的戰鬥</del> 努力的奮鬥，相信大家都安裝好 Hexo 了，那接下來要做的就是建立你的 Hexo 部落格環境啦 ~</p><h3 id="建立專案資料夾"><a href="#建立專案資料夾" class="headerlink" title="建立專案資料夾"></a>建立專案資料夾</h3><p>首先，在桌面(或其他你想建立專案資料夾的地方)建立一個專案資料夾，我這邊就先在桌面建立一個 amyHexo 的資料夾 <del>(沒錯，我桌面背景是紅色的</del> ，資料夾的名字可以自己取不用和我一樣</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250429/201726949J7FjsCAB7.png" alt="在桌面建立 amyHexo 的資料夾"></p><h3 id="用cd指令移動到指定的路徑"><a href="#用cd指令移動到指定的路徑" class="headerlink" title="用cd指令移動到指定的路徑"></a>用cd指令移動到指定的路徑</h3><p>再來開啟終端機執行 <code>cd</code> 指令移動到專案資料夾如下，你的資料夾要看你建立在哪個路徑再將你的路徑填入以下 <code>你的專案資料夾路徑</code> 位置裡 (注意：cd 後面有一個空白字元再接路徑)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> 你的專案資料夾路徑</span><br></pre></td></tr></table></figure><p>以我建立的 amyHexo 的資料夾為例，就要執行 <code>cd c:\Users\User\Desktop\amyHexo</code> 這個指令，每個人的 User 名字可能不一樣那就看你自己叫什麼囉 ~</p><h3 id="快速填入指定資料夾路徑的方法"><a href="#快速填入指定資料夾路徑的方法" class="headerlink" title="快速填入指定資料夾路徑的方法"></a>快速填入指定資料夾路徑的方法</h3><p>如果你懶得輸入這麼長的路徑，有一個方法可以試試看，先在終端機輸入 <code>cd</code> 和一個空白字元，再把你想前往的專案資料夾用滑鼠按住左鍵拖曳到終端機視窗內</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250429/201726944tnpIC3tmI.png" alt="把想前往的資料夾拖曳到終端機"></p><p>然後放開滑鼠左鍵， <code>cd</code> 空白後面就會自動填入你拖曳進來的資料夾路徑囉 ~</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250429/20172694ewCUEzUq4x.png" alt="放開就會自動填入該資料夾位置"></p><hr><h2 id="下-Hexo-指令建立環境"><a href="#下-Hexo-指令建立環境" class="headerlink" title="下 Hexo 指令建立環境"></a>下 Hexo 指令建立環境</h2><p>再來就進入重頭戲用 Hexo 指令來建立你的部落格環境囉 ~</p><p>前面講到 <code>cd</code> 移動到你的專案資料夾中，確定有移動到正確路徑下之後，執行以下指令，其中 <code>你的網站英文名稱</code> 可以自己取名：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init 你的網站英文名稱</span><br></pre></td></tr></table></figure><p>以我的部落格網站英文名稱 amy10blog 為例，下完 <code>hexo init amy10blog</code> 指令後，終端機成功跑完回應就成功囉 ~</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250429/20172694Z78eK5oMQd.png" alt="終端機執行 hexo init "></p><p>執行完以上指令後， Hexo 就會在專案資料夾中建立一個新資料夾，這個新資料夾會用剛剛指令輸入的 <code>你的網站英文名稱</code> 命名，以我的為例新資料夾就會叫 <code>amy10blog</code>：</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250429/20172694KdrmLtwayg.png" alt="新資料夾名稱"></p><p>而新資料夾裡面是所有 Hexo 部落格環境會需要用到的東西，給瞄你一眼：</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250429/20172694rIxaAoeMRt.png" alt="資料夾內 Hexo 部落格環境會需要用到的東西"></p><hr><h2 id="如何瀏覽-Hexo-為你建立的部落格網站呢？"><a href="#如何瀏覽-Hexo-為你建立的部落格網站呢？" class="headerlink" title="如何瀏覽 Hexo 為你建立的部落格網站呢？"></a>如何瀏覽 Hexo 為你建立的部落格網站呢？</h2><p>說了這麼多，要怎麼看我現在的部落格網站長什麼樣子呢？一樣要用 Hexo 的指令，接著往下看</p><p>使用 Hexo 的指令在本地查看你的部落格網站之前，要記得先移動到 Hexo 剛剛在專案資料夾中幫你建的新資料夾路徑下，以我的為例，就是要移到 <code>amy10blog</code> 資料夾：</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250429/201726944BzbPrOwIl.png" alt="先移動到 Hexo 剛剛在專案資料夾中幫你建的新資料夾路徑下"></p><p>接著，再執行以下指令，開啟 Hexo 伺服器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>如果嫌棄 <code>hexo server</code> 太長，下 <code>hexo s</code> 這個指令一樣可以開啟 Hexo 伺服器，如果要執行其他指令，想關閉伺服器，可以依照終端機的提示按下 ctrl + c 鍵即可關閉</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250429/20172694y0YKDcJD69.png" alt="hexo server 開啟 Hexo 伺服器指令"></p><p>執行完之後它會回給你一段本地端的網址，點開網址就可以看見目前部落格的樣子囉 ~ 通常初始的部落格網站大家都會長這樣：</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250429/20172694RC45P8QUN0.png" alt=" Hexo 部落格網站初始樣子"></p><p>後續會再教大家客製化的方法，不過會先把 Hexo 的基本指令講解完再討論這塊，也是有許多研究後的結果可以分享，那我們就下篇文章見囉 ~</p>]]></content>
    
    
    <summary type="html">如何帥氣的下指令建立 Hexo 環境😎，在本機查看你建立的 Hexo 部落格吧 ~</summary>
    
    
    
    <category term="Hexo" scheme="http://amy6072698.github.io/amy10blog/categories/Hexo/"/>
    
    
    <category term="Hexo" scheme="http://amy6072698.github.io/amy10blog/tags/Hexo/"/>
    
    <category term="前端" scheme="http://amy6072698.github.io/amy10blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>從零開始學 Hexo (2) | Hexo 安裝方法</title>
    <link href="http://amy6072698.github.io/amy10blog/2025/04/22/20250422-hexo-learning2/"/>
    <id>http://amy6072698.github.io/amy10blog/2025/04/22/20250422-hexo-learning2/</id>
    <published>2025-04-22T03:16:29.000Z</published>
    <updated>2025-05-19T12:41:00.996Z</updated>
    
    <content type="html"><![CDATA[<h2 id="想了解-Hexo-從官網開始"><a href="#想了解-Hexo-從官網開始" class="headerlink" title="想了解 Hexo 從官網開始"></a>想了解 Hexo 從官網開始</h2><p>想知道怎麼安裝 Hexo，第一站就是 <a href="https://hexo.io/zh-tw/">Hexo 的官網</a> ，進入官網後點上方導覽列的「文件」:</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250429/20172694EThBdppvdH.png" alt="進入 Hexo 官網後點上方導覽列的文件"></p><p>然後你就可以看到 Hexo 很貼心的把安裝方式放在文件的第一頁囉 ~</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250429/20172694pKvZW6QO9e.png" alt=" Hexo 的安裝方式在文件第一頁"></p><p>往下滑你可以看到更多關於 Hexo 安裝需要的東西：</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250429/20172694sCbdH74cis.png" alt=" Hexo 安裝需求"></p><p>首先安裝需求的部分會需要先安裝 Node.js 和 Git，先從 Node.js 的安裝開始</p><hr><h2 id="安裝-Node-js"><a href="#安裝-Node-js" class="headerlink" title="安裝 Node.js"></a>安裝 Node.js</h2><p>如果你曾經看過以前的文章講解如何安裝 Node.js，那你就會看見以下這張圖，它有兩種下載按鈕，一個是 LTS 版本、一個是 Current 版本</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250429/201726942qi9mlKzLY.png" alt="舊版 Node.js 官網下載安裝按鈕"></p><p>這兩種版本差異簡單講就是 LTS (Long-term support) 長期支援版是當前穩定的版本，Current 則是最新版本，一般如果不是為了最新功能不會去下載 Current 版，所以這邊就下載 LTS 版本就可以囉 ~</p><p>不過現在<a href="https://nodejs.org/zh-tw">官網</a>已經改成只有 LTS 一個按鈕了，所以上面說明就當作是小補充吧，把那唯一的下載按鈕揍下去就對了</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250429/20172694Lkc9MCfbK2.png" alt="新版 Node.js 官網下載安裝按鈕"></p><p>下載完成之後你的下載資料夾會出現 Node.js 的安裝檔，點兩下開啟檔案然後按 Next 按鈕、勾選同意，然後一路按 Next 按鈕最後再按下 Install 按鈕就可以完成安裝了</p><p>如果你按安裝過程中沒有指定位置，安裝完之後的 Node.js 一般會在本機的 Program Files 資料夾中：</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250429/20172694to0E2nkZ3Z.png" alt="安裝完之後的 Node.js 一般會在本機的 Program Files 資料夾中"></p><hr><h2 id="安裝-Git"><a href="#安裝-Git" class="headerlink" title="安裝 Git"></a>安裝 Git</h2><p>要安裝 Git 就先進入它的<a href="https://git-scm.com/">官網</a>，進入後往下滑會看見一台小電腦在畫面上，它會判斷你是 Windows 還是 Mac 系統，按下下載按鈕：</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250429/20172694adon1sG4bp.png" alt=" Git 官網下載安裝按鈕"></p><p>然後官網會跳轉下載頁面，並自動下載，若沒有自動觸發，可點擊下圖 Click here to download 連結手動下載：</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250429/20172694y749Bk58j7.png" alt=" Git 官網 Click here to download 連結手動下載"></p><p>下載完成之後你的下載資料夾會出現 Git 的安裝檔，一樣點兩下開啟檔案，再來就是按肯定的按鈕 <del>(說 Yes 就對了</del> ，然後按下安裝，這樣就完成安裝囉 ~</p><hr><h2 id="安裝-Hexo-前先檢查"><a href="#安裝-Hexo-前先檢查" class="headerlink" title="安裝 Hexo 前先檢查"></a>安裝 Hexo 前先檢查</h2><p>再來就要開啟終端機檢查有沒有成功安裝好 Node.js 和 Git 了，開啟終端機後輸入以下指令如果系統都有回應你剛剛安裝的版本號碼就表示你正確完成安裝囉 ~</p><h3 id="檢查是否安裝-Node-js"><a href="#檢查是否安裝-Node-js" class="headerlink" title="檢查是否安裝 Node.js"></a>檢查是否安裝 Node.js</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><h3 id="檢查-npm-是否正常"><a href="#檢查-npm-是否正常" class="headerlink" title="檢查 npm 是否正常"></a>檢查 npm 是否正常</h3><p>npm 是 Node.js 預設的軟體套件管理系統，會隨著 Node.js 安裝時一起安裝，因為之後會透過 npm 進行 Hexo 的安裝，所以一定要確保 npm 有正常安裝</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm -v</span><br></pre></td></tr></table></figure><h3 id="檢查是否安裝-Git"><a href="#檢查是否安裝-Git" class="headerlink" title="檢查是否安裝 Git"></a>檢查是否安裝 Git</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure><hr><h2 id="安裝-Hexo"><a href="#安裝-Hexo" class="headerlink" title="安裝 Hexo"></a>安裝 Hexo</h2><p>終於進入安裝 Hexo 的階段啦~~~ 確認以上軟體安裝完成後，接下來依照<a href="https://hexo.io/zh-tw/docs/#%E5%AE%89%E8%A3%9D-Hexo">官網的安裝指示</a>，執行以下指令就可以透過 npm 來安裝 Hexo 囉 ~</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h3 id="檢查-Hexo-是否安裝成功"><a href="#檢查-Hexo-是否安裝成功" class="headerlink" title="檢查 Hexo 是否安裝成功"></a>檢查 Hexo 是否安裝成功</h3><p>接下來別忘記檢查 Hexo 是否安裝成功，執行以下指令，如果有跑出版本號碼就恭喜你成功安裝 Hexo 囉🎉</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure><hr><h2 id="你可能會遇到-PowerShell-執行原則問題"><a href="#你可能會遇到-PowerShell-執行原則問題" class="headerlink" title="你可能會遇到 PowerShell 執行原則問題"></a>你可能會遇到 PowerShell 執行原則問題</h2><p>如果你是使用 Windows 系統的 PowerShell 為執行指令的終端機，或你是開 VSCode 內的終端機(VSCode 預設使用的終端機是 PowerShell)，那在安裝時你可能會遇到 PowerShell 的執行原則問題 <del>(提前說以免有人再掉到坑裡，維護安全人人有責</del></p><h3 id="情況說明"><a href="#情況說明" class="headerlink" title="情況說明"></a>情況說明</h3><p>當你執行指令打算美美的完成 Hexo 安裝時，發現它回了一串錯誤給你，有可能長得像這樣：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo : 因為這個系統上已停用指令碼執行，所以無法載入 ...</span><br></pre></td></tr></table></figure><p>講一堆就是不給你安裝的意思，那有可能是 PowerShell 的執行原則產生的問題， Windows 預設的 powershell 執行原則為 <code>Restricted</code></p><p> <strong>PowerShell 有四種執行原則：</strong></p><ol><li>Restricted：所有 <code>PowerShell Script</code>(.ps1) 皆無法執行(Windows系統預設)</li><li>AllSigned：所有 <code>PowerShell Script</code> 都要經過受信任的發行者簽屬過後才可執行</li><li>RemoteSigned：針對從異地下載下來的 <code>PowerShell Script</code> 需要經過受信任的發行者簽屬過後才可執行，本機的 <code>PowerShell Script</code> 可直接執行</li><li>Unrestricted：無限制，所有 <code>PowerShell Script</code> 皆可執行</li></ol><h3 id="解決方法"><a href="#解決方法" class="headerlink" title="解決方法"></a>解決方法</h3><p>想解決前面出現的錯誤其實只要改變執行原則的設定即可，但在改變之前要先執行以下指令確認 PowerShell 現在是哪個執行原則：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get-executionpolicy</span><br></pre></td></tr></table></figure><p>如果它回 <code>Restricted</code>，再往下執行以下指令，執行後會有視窗詢問，按下確定後就能將執行原則改為 <code>Remotesigned</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set-executionpolicy remotesigned</span><br></pre></td></tr></table></figure><p>但如果不幸還是跳出錯誤，長得像這樣：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-ExecutionPolicy : 拒絕存取登錄機碼...</span><br></pre></td></tr></table></figure><p>那就再往下執行以下指令，就能成功執行了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-ExecutionPolicy -Scope CurrentUser RemoteSigned</span><br></pre></td></tr></table></figure><p>希望大家還是不要踩到坑比較好，如果不幸遇到的話希望這個問題補充可以幫助到你，以上內容參考自<a href="https://akoncc.github.io/2019/11/01/vscode-cant-run-script/">CC的技術隨筆 VSCode 執行 npm install 失敗文章</a>，想了解更詳細內容可以去看看</p><p>那就先祝大家都順利安裝 Hexo 成功囉 ~ 我們下篇文章見🪄</p>]]></content>
    
    
    <summary type="html">了解 Hexo 安裝前需求與如何安裝 Hexo</summary>
    
    
    
    <category term="Hexo" scheme="http://amy6072698.github.io/amy10blog/categories/Hexo/"/>
    
    
    <category term="Hexo" scheme="http://amy6072698.github.io/amy10blog/tags/Hexo/"/>
    
    <category term="前端" scheme="http://amy6072698.github.io/amy10blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>從零開始學 Hexo (1) |  Hexo 是什麼？為什麼開始學 Hexo？</title>
    <link href="http://amy6072698.github.io/amy10blog/2025/04/21/20250421-hexo-learning1/"/>
    <id>http://amy6072698.github.io/amy10blog/2025/04/21/20250421-hexo-learning1/</id>
    <published>2025-04-21T02:12:31.000Z</published>
    <updated>2025-04-29T15:41:32.667Z</updated>
    
    <content type="html"><![CDATA[<h2 id="開始學-Hexo-的動機"><a href="#開始學-Hexo-的動機" class="headerlink" title="開始學 Hexo 的動機"></a>開始學 Hexo 的動機</h2><p>進入 Hexo 的簡單介紹之前，先說說我自己開始學 Hexo 的動機，因為我希望能建立一個自己的部落格網站，不只是當作平時學習前端知識的筆記收藏區，也希望透過這些文章分享能幫助到正在學習的新手，而 <del>本人比較懶</del> Hexo 因為能夠輕鬆完成一個部落格網站的架構，也有許多中文教學幫助初學者入門，建置屬於自己的專屬部落格網站，所以就下定決心要開始學習用 Hexo 完成屬於自己的部落格網站啦 ~</p><hr><h2 id="什麼是-Hexo？"><a href="#什麼是-Hexo？" class="headerlink" title="什麼是 Hexo？"></a>什麼是 Hexo？</h2><p>介紹什麼是 Hexo 之前，先想想如果要寫部落格文章，可能會用哪些方式去撰寫自己的文章？<br> <strong>1. 使用現有的部落格平台撰寫文章</strong> ，如：痞客邦、iT邦幫忙、Medium…<br> <strong>2. 自己架設部落格網站存放自己的文章</strong><br>接下來就談談這兩種方式的一些優缺比較吧 ~</p><h3 id="使用現有的部落格平台優缺"><a href="#使用現有的部落格平台優缺" class="headerlink" title="使用現有的部落格平台優缺"></a>使用現有的部落格平台優缺</h3><p>使用現有的部落格平台優點是簡單粗暴不太需要思考， <strong>只要專注在撰寫的文章內容即可</strong> ，因為是使用現有平台所以 <strong>平台本身會有一定的流量</strong> ，不太需要過度擔心自己的文章無法被搜尋到等複雜的 SEO 問題</p><p>但這樣的便利伴隨一定的缺點，那就是如果 <strong>平台收掉你辛苦寫的文章可能會遺失</strong> ，而且有些平台可能有個人主頁但版型都很一致性可變動部分不多、 <strong>無法讓你充分客製化想要的網頁樣式</strong></p><h3 id="架設部落格網站工具比較"><a href="#架設部落格網站工具比較" class="headerlink" title="架設部落格網站工具比較"></a>架設部落格網站工具比較</h3><p>看完上面使用現有部落格平台的缺點後，如果想避免有些人就會開始考慮架設自己的部落格網站，這時候就會需要一些方便快速的架站工具，如：WordPress、Hexo…，當然可能還有其他架站工具</p><p>但這邊先以我曾經使用過的 WordPress、Hexo 這兩個來說明，這兩個都是架站的工具，一樣都有多種網站主題可以選擇，讓想架設網站的人能夠快速架站，但兩者在架站上還是有差異的</p><ul><li><strong>WordPress：</strong> 是 <strong>動態網頁架站工具</strong> ，動態網頁通常會需要搭配一個資料庫，需要另外 <strong>支出動態伺服器的費用</strong> ；客製化網站方面：有提供視覺化的編輯器外掛，不懂程式碼其實也能勉強客製出一個網站</li><li><strong>Hexo：</strong> 是 <strong>靜態網頁架站工具</strong> ，可以想成是部落格網站架設工具，如果 <strong>搭配 GitHub 空間可以實現幾乎零成本的網站架設</strong> ；客製化網站方面：需要學習一些程式碼、會用終端機下指令比較容易客製出網站</li></ul><p>本人在進入神奇的程式碼世界前有學過一些 WordPress 可以大概說明兩種工具在客製化上面的使用差別， WordPress 雖然有視覺化的編輯器，但如果想進一步客製網站結構跟樣式還是必須要學習一些程式碼的，這也是為什麼我改行學程式碼了🤣</p><hr><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>看過以上比較，你會發現使用 Hexo 架站雖然能省一些荷包成本，但相對的它就會需要更多的腦力成本，沒錯 ~ 要學習程式碼跟指令才能客製出自己的專屬部落格，不過別擔心之後我會帶大家一起學習 Hexo 的基本指令及其他延伸知識</p><hr><h2 id="心情小語"><a href="#心情小語" class="headerlink" title="心情小語"></a>心情小語</h2><p>其實 Hexo 在去年大概 4、5 月就已經初步學習過了，除了我自己進修上課的學習資源外，還有<a href="https://israynotarray.com/categories/hexo/">六角大前輩 Ray 的 Hexo 系列文章</a>，讓我決定在重新翻新架設<a href="https://amy6072698.github.io/amy10blog/">我的部落格</a>後，來分享自己在架設過程中發現並處理的問題，也會提到一些基本操作，再請大家多多支持 ~</p>]]></content>
    
    
    <summary type="html">開始學 Hexo 的動機以及常見部落格經營方式比較</summary>
    
    
    
    <category term="Hexo" scheme="http://amy6072698.github.io/amy10blog/categories/Hexo/"/>
    
    
    <category term="Hexo" scheme="http://amy6072698.github.io/amy10blog/tags/Hexo/"/>
    
    <category term="前端" scheme="http://amy6072698.github.io/amy10blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>如果不試一輩子都不知道自己能走這麼遠｜不知不覺寫了 1 年程式，前端工程師修煉之路</title>
    <link href="http://amy6072698.github.io/amy10blog/2025/04/15/20250415_reflections_on_learing_frontend/"/>
    <id>http://amy6072698.github.io/amy10blog/2025/04/15/20250415_reflections_on_learing_frontend/</id>
    <published>2025-04-14T16:27:22.000Z</published>
    <updated>2025-04-20T10:48:07.751Z</updated>
    
    <content type="html"><![CDATA[<h2 id="報名緣起"><a href="#報名緣起" class="headerlink" title="報名緣起"></a>報名緣起</h2><p>自從動了想轉職前端的念頭，怎麼動念的有緣再說 XDD</p><p>就開始上網瘋狂找前端學習資源，但始終不知道從何下手，後來看了一篇分享文章，發現我需要更系統化的學習所以購買六角學院的影音課程</p><p>但發現只是看影片學習成效不佳，自己摸索需要很多時間，中間曾嘗試其他單位，但課程內容過舊學習反而更吃力 (要花更多時間除錯</p><p>去年 4 月正當迷茫之際 <del>去找牙醫定期洗牙時 (這不是重點</del> ，一則臉書廣告讓我決定再試一次，於是我報名了 2024 年的前端工程師體驗營 (在報名截止最後一天</p><p>上完體驗營之後我發現自己不排斥寫程式 (反而喜歡上寫程式破解問題的過程，就這樣我毅然地踏上 <strong>六角學院長達 9 個月</strong> 的前端工程師修煉取經之路</p><p>廢話少說上表<br><img src="https://ithelp.ithome.com.tw/upload/images/20250414/20172694KjWc9r5pia.png" alt="2024 六角學院前端工程師培訓班時程表"></p><p>接下來就來說說經歷 9 個月修鍊過關斬將的心得吧~ (放一隻悟空加持🐵</p><hr><h2 id="團隊合作的重要-組隊去取經"><a href="#團隊合作的重要-組隊去取經" class="headerlink" title="團隊合作的重要 (組隊去取經"></a>團隊合作的重要 (組隊去取經</h2><p>作者我並不是本科系上完體驗營決定要轉職時，說不害怕是假的，但 <strong>不被認同比自己能力不足更讓我害怕</strong> ，畢竟能力可以靠進修跟實作來補足，自信卻會因為一直不被認同而消磨，這樣取經之路會更艱難</p><p>你也許會說非本科轉職本來就容易不被認同啊~ (沒錯，所以才要找一個正面積極的學習環境，可以選當然就要選能支持自己撐下去進修的環境，以免好不容易燃起的進修魂被別人一桶水澆滅</p><p>六角會依照問卷調查結果，將程度、背景差不多的學員分在一起組隊打怪，所以進修過程中我不用擔心沒人認同，我的隊友跟我一樣 <del>(是悟空🐵</del> 選了同樣的路</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250414/20172694vuaAVSmcQ0.png" alt="隊友梗圖"></p><p>只是後續 <strong>團隊的時間管理、隊友積極度、與隊友的溝通</strong>，這些都與隊友程度背景相不相符無關，但卻會影響專案開發進度的關鍵，在這段與團隊一起開發專案的過程中 <strong>「當團隊出現狀況該如何應對」</strong> 是很重要的課題</p><hr><h2 id="團隊合作的好處是比一個人走走更遠"><a href="#團隊合作的好處是比一個人走走更遠" class="headerlink" title="團隊合作的好處是比一個人走走更遠"></a>團隊合作的好處是比一個人走走更遠</h2><p>一個人進修是很孤單、無助的，一群人互相幫助分工讓專案更完善，有隊友就能在專案開發或實作練習卡關時，提出來問題大家一起破關 (打怪，有時候真的就被我們這群臭皮匠找到網路大神的破解法了</p><p>在這段團隊合作的過程中我 學會如何跟隊友溝通合作，也 <strong>了解到互相配合、互相扶持、互相努力才能完成最終專案開發的成果</strong>，即使培訓課程已經結束我們也持續在交流不錯的技術學習資源，並持續優化我們的專案</p><hr><h2 id="最終-Boss-關：-React-作品實戰班"><a href="#最終-Boss-關：-React-作品實戰班" class="headerlink" title="最終 Boss 關： React 作品實戰班"></a>最終 Boss 關： React 作品實戰班</h2><p>經歷長達 9 個月的前端工程師培訓迎來最終 Boss 關，是最後一環，也是最重要的一環</p><p>必須和團隊完成一個 React 專案，而且看看前面的時程表，我必須兼顧 React 直播班的學習進度，並把學到的技術用在專案開發上</p><p>初學 React 很艱難，學習過程中不斷考驗我的 JavaScript 基礎， <strong>遇到困難怎麼辦？利用各種資源想辦法解決呀！</strong> 六角的學習資源、六角教練跟助教、網路上其他大神的破解法等</p><p>無論如何向前跑就對了！直播班每週都有作業，沒趕上進度等團隊討論完專案主題 <del>(就變成夾心餅乾餡了</del>，當然六角也很怕學員不交作業影響開發進度，所以會提供各種資源讓你救自己</p><p><img src="https://ithelp.ithome.com.tw/upload/images/20250414/20172694qxZ1j5esFt.png" alt="交作業梗圖"></p><h3 id="不輕易放棄才是我最大的收穫"><a href="#不輕易放棄才是我最大的收穫" class="headerlink" title="不輕易放棄才是我最大的收穫"></a>不輕易放棄才是我最大的收穫</h3><p>不過就算六角有資源不努力利用也沒用，過程中聽說就有不少人放棄完成專案開發，我很高興我能破除萬難堅持撐下去，既然選了轉職我就要走下去</p><p>也因為撐下去了才能學會更多技術，學會碰到困難要想辦法找解方，這樣 <strong>不輕易放棄的態度</strong> 是我這段時間進修得來的最大收穫</p><p>好幾次學習 React 的過程，我也曾懷疑自己能不能和隊友開發完專案的主要功能，但我就是不想放棄，都撐這麼久了，剩下最後一段路為什麼不走完？</p><hr><h2 id="如果不試一輩子都不知道自己能走這麼遠"><a href="#如果不試一輩子都不知道自己能走這麼遠" class="headerlink" title="如果不試一輩子都不知道自己能走這麼遠"></a>如果不試一輩子都不知道自己能走這麼遠</h2><p>從想轉職而開始嘗試寫程式，到發現自己不排斥，再到最後持續進修開發出專案，這之中每一步都很重要，但我想踏出第一步很關鍵 <strong>沒有第一步哪來下一步</strong></p><p>出了社會我不斷嘗試找到感興趣的領域，忘了說我本科是外語相關的，因為我知道外語始終是工具總要找到一技之長，不然就等著被取代，尤其時代進步很快，學習新技術無可避免，只能持續進修增加技能提升價值</p><p>而為了找到我真正想做的事，從畢業後就一直嘗試進修任何感興趣的領域，就這樣嘗試上了六角的前端工程師體驗營，才確定自己真的想往這條路走</p><p>現在回頭看才發現自己已經持續學習前端技術 1 年了，團隊專案也開發完成，如果我當時沒有試，我想我一輩子都不知道自己能走這麼遠</p><p>最後很感謝我的隊友和六角的老師、專題教練、助教們，你們是我撐下去的助力 <del>(想放棄時看到隊友也撐得很痛苦不知為何就又想撐下去了🤣</del>，後續團隊專案如果學了新技術可以持續優化</p><hr><p>這篇文章主要是分享自己進修前端工程師的心得，未來也會把一些遇到的開發問題或自己學習的筆記寫成文章分享</p><p>期待與大家再次空中再會啦~~~</p>]]></content>
    
    
    <summary type="html">結束 9 個月前端進修培訓，沒試過真的不知道自己能走這麼遠</summary>
    
    
    
    <category term="心得分享" scheme="http://amy6072698.github.io/amy10blog/categories/%E5%BF%83%E5%BE%97%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="前端" scheme="http://amy6072698.github.io/amy10blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="心得分享" scheme="http://amy6072698.github.io/amy10blog/tags/%E5%BF%83%E5%BE%97%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>2024 六角前端工程師體驗營心得</title>
    <link href="http://amy6072698.github.io/amy10blog/2024/06/09/20240609_reflections_on_learing_hexschool/"/>
    <id>http://amy6072698.github.io/amy10blog/2024/06/09/20240609_reflections_on_learing_hexschool/</id>
    <published>2024-06-09T12:36:31.000Z</published>
    <updated>2025-04-20T07:04:50.736Z</updated>
    
    <content type="html"><![CDATA[<h2 id="如何認識六角？"><a href="#如何認識六角？" class="headerlink" title="如何認識六角？"></a>如何認識六角？</h2><p>其實一開始對前端感興趣是在前年，做了很多調查看到一篇部落格文章特別寫到六角學院是很棒的學習環境，有助教老師不會排斥新手問問題，才下定決心先買了六角學院的影音課程</p><p>在前年年底工作繁忙期終於告一段落時，才開始看影音教學學了一陣子，但這時候的我還不太敢在 Discord 群組問問題，一是覺得不太熟悉 Discord 操作用起來怕怕的，二是覺得跟六角的助教同學不太熟就一直問感覺怪怪的，所以學習起來一直有種孤單、無力的感覺</p><h2 id="因為無力感一度走錯路"><a href="#因為無力感一度走錯路" class="headerlink" title="因為無力感一度走錯路"></a>因為無力感一度走錯路</h2><p>在今年年初這種學習上的無力感和孤單感讓我決定： <strong>要不然換一個學習平台試試看？</strong></p><p>於是我轉而找到了另一家也是線上的學習平台，他們有開前後端的教學系列課，都是線上影音課，同樣有助教跟 LINE 顧問可以問問題</p><h3 id="但是事情沒這麼簡單"><a href="#但是事情沒這麼簡單" class="headerlink" title="但是事情沒這麼簡單"></a>但是事情沒這麼簡單</h3><ul><li><p>影片是 4 年前的教學影片：影片下方沒有備註新的操作內容</p></li><li><p>助教老是不知道你在問什麼：跟他說影片幾分幾秒錄影有缺漏，他反問我有沒有看影片？</p></li><li><p>LINE 顧問只會像鬧鐘一樣過沒幾天問你進度如何：專業問題顧問不會所以沒辦法解答，我只想問我就是卡住了要怎麼有進度？</p></li></ul><p><strong>結果最後問題不是助教、也不是顧問幫忙解決的，是一個印度人解決的！</strong></p><p>沒錯！是我去網路上找了兩天資料，最後看到一個印度人的教學影片解決的，我就這樣花了十幾萬到這種平台自己找罪受，當我決定要退費時已經來不及了，因為已經看超過可以退費的影片進度了，當我再次回過頭仔細觀察這個所謂專業的前後端學習平台，他們教出的學員做出什麼作品時，那作品的程度…我覺得面試官是不可能會錄取的</p><h2 id="反正都走投無路了就再相信一次"><a href="#反正都走投無路了就再相信一次" class="headerlink" title="反正都走投無路了就再相信一次"></a>反正都走投無路了就再相信一次</h2><p>了解這個平台根本只想賺錢，不是真心想要輔導學員做出好作品、讓學員順利轉職之後，我決定果斷放棄那個有毒的學習環境，再一次尋找一個能夠讓我好好學習順利轉職的平台</p><p>就在已經對線上學習平台心灰意冷的時候，我的臉書跳出六角學院的體驗營報名資訊，點進去之前我還想著：「是不是又是一個騙錢不想認真輔導學員的學習平台」，結果看見價格時…我只覺得他們瘋了！</p><p>原本預計明年要轉職，結果遇到前一個學習平台打壞所有原定計畫，我想著 <strong>敢用這麼瘋的價格開一個月的體驗營課程，反正我也走投無路了就跟他拚了、跟他一起瘋</strong>，就這樣我報名了 2024 年六角學院的體驗營</p><h2 id="徬徨過最後才會選擇跟六角一起前進"><a href="#徬徨過最後才會選擇跟六角一起前進" class="headerlink" title="徬徨過最後才會選擇跟六角一起前進"></a>徬徨過最後才會選擇跟六角一起前進</h2><p>參加了這一個月的體驗營，我很高興瘋了那一次，再次相信六角學院真的是願意輔導學員讓學員能順利轉職的學習平台，這一個月每天都很累但是看見自己的作品、組員間討論做作業，都讓 <strong>我感覺對前端的學習終於上軌道了</strong></p><p><strong>當然上完體驗營只是開始，不過要我選擇一起學習一起前進的夥伴的話，一定非六角莫屬！</strong></p><p>在體驗營中因為知道很多人是新手所以更容易在 Discord 群組發問，小組組員背景很相近可以互相勉勵一起想出問題的解決方法，跟自己之前孤軍奮戰相比多了幾分團戰打怪的熱血，真的很喜歡這種學習氣氛</p><p>所以我決定繼續跟著六角學習前端，最後祝跟我一樣想轉職的六角夥伴都能轉職成功！</p><p>讓我們一起打怪、一起前進！</p>]]></content>
    
    
    <summary type="html">2024 年從參加六角學院前端工程師體驗營，到下定決心走向轉職</summary>
    
    
    
    <category term="心得分享" scheme="http://amy6072698.github.io/amy10blog/categories/%E5%BF%83%E5%BE%97%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="前端" scheme="http://amy6072698.github.io/amy10blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="心得分享" scheme="http://amy6072698.github.io/amy10blog/tags/%E5%BF%83%E5%BE%97%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
</feed>
